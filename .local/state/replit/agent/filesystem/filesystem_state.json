{"file_contents":{"src/components/themed/Loader.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { Spinner } from 'tamagui';\n\nexport const Loader = styled(Spinner, {\n  color: '$jawPrimary',\n\n  variants: {\n    size: {\n      small: { size: 'small' },\n      medium: { size: 'large' },\n      large: { size: 'large' },\n    },\n  },\n\n  defaultVariants: {\n    size: 'medium',\n  },\n});","size_bytes":326},"src/components/themed/Avatar.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { Avatar as TamaguiAvatar } from 'tamagui';\n\nexport const Avatar = styled(TamaguiAvatar, {\n  circular: true,\n  backgroundColor: '$jawSurface',\n  borderColor: '$jawBorder',\n  borderWidth: 1,\n\n  variants: {\n    size: {\n      small: { size: '$6' },\n      medium: { size: '$8' },\n      large: { size: '$10' },\n    },\n  },\n\n  defaultVariants: {\n    size: 'medium',\n  },\n});\n\n// Export Avatar sub-components for easier usage\nexport const AvatarImage = TamaguiAvatar.Image;\nexport const AvatarFallback = styled(TamaguiAvatar.Fallback, {\n  backgroundColor: '$jawPrimary',\n  color: '$jawBackground',\n  fontWeight: '600',\n});","size_bytes":662},"global.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n","size_bytes":59},"src/components/themed/Button.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { Button as TamaguiButton } from 'tamagui';\n\nexport const Button = styled(TamaguiButton, {\n  borderRadius: '$2',\n  fontWeight: '600',\n\n  variants: {\n    size: {\n      small: { size: '$3' },\n      medium: { size: '$4' },\n      large: { size: '$5' },\n    },\n    variant: {\n      primary: {\n        backgroundColor: '$jawPrimary',\n        color: '$jawBackground',\n        hoverStyle: {\n          backgroundColor: '$jawPrimaryLight',\n        },\n        pressStyle: {\n          backgroundColor: '$jawPrimaryLight',\n          scale: 0.98,\n        },\n      },\n      outline: {\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderColor: '$jawPrimary',\n        color: '$jawPrimary',\n        hoverStyle: {\n          backgroundColor: '$jawPrimary',\n          color: '$jawBackground',\n        },\n        pressStyle: {\n          backgroundColor: '$jawPrimaryLight',\n          color: '$jawBackground',\n          scale: 0.98,\n        },\n      },\n      ghost: {\n        backgroundColor: 'transparent',\n        color: '$color',\n        hoverStyle: {\n          backgroundColor: '$jawSurface',\n        },\n        pressStyle: {\n          backgroundColor: '$jawSurface',\n          scale: 0.98,\n        },\n      },\n    },\n  },\n\n  defaultVariants: {\n    size: 'medium',\n    variant: 'primary',\n  },\n});","size_bytes":1352},"src/components/themed/Card.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { YStack } from 'tamagui';\n\nexport const Card = styled(YStack, {\n  backgroundColor: '$jawSurface',\n  borderRadius: '$3',\n  padding: '$4',\n  borderWidth: 1,\n  borderColor: '$jawBorder',\n\n  variants: {\n    elevation: {\n      none: {},\n      small: {\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 1 },\n        shadowOpacity: 0.22,\n        shadowRadius: 2.22,\n        elevation: 3,\n      },\n      medium: {\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n      },\n      large: {\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 4 },\n        shadowOpacity: 0.30,\n        shadowRadius: 4.65,\n        elevation: 8,\n      },\n    },\n  },\n\n  defaultVariants: {\n    elevation: 'small',\n  },\n});","size_bytes":884},"replit.md":{"content":"# Overview\n\nJAW Restaurant is a React Native mobile application built with Expo that connects diners with restaurant owners. The app provides a dual-sided platform where users can discover and book restaurants, while restaurant owners can manage their establishments and bookings. The application supports both light and dark themes, multiple languages, and includes features like user authentication, restaurant search and filtering, booking management, and push notifications.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application follows a modular React Native architecture using Expo as the development platform. The codebase is organized with TypeScript for type safety and uses a feature-based folder structure with shared components.\n\n**Navigation System**: Implements React Navigation with separate navigation stacks for authenticated users (UserNavigator for diners, OwnerNavigator for restaurant owners) and unauthenticated users (AuthNavigator). The RootNavigator manages the overall navigation flow based on authentication state and user type.\n\n**State Management**: Uses Zustand for lightweight state management with separate stores for authentication (authStore), UI state (uiStore), and user-specific data. This provides a simple and performant alternative to Redux while maintaining type safety.\n\n**Component Architecture**: Follows a component-driven approach with reusable UI components (Button, Card, Avatar, Loader, Input) that support theming and consistent styling across the application.\n\n**Theme System**: Implements a custom theming solution with light and dark mode support, managed through the useTheme hook and stored in the UI store for persistence across app sessions.\n\n## Backend Architecture\n**Authentication Service**: Integrates with Supabase for user authentication, supporting email/password login with automatic session management and token refresh.\n\n**Database Design**: Uses Supabase PostgreSQL database with a profiles table structure that extends the default auth.users table to store additional user information including user type (diner/owner), profile details, and preferences.\n\n**API Layer**: Implements a service-oriented architecture with Supabase client for database operations, including CRUD operations for users, restaurants, and bookings.\n\n**File Storage**: Leverages Supabase Storage for handling image uploads (profile pictures, restaurant images) with public URL generation and file management capabilities.\n\n## Data Models\nThe application defines clear TypeScript interfaces for core entities:\n- **User**: Supports both diner and owner types with profile information\n- **Restaurant**: Complete restaurant data including business hours, location, amenities, and ratings\n- **Booking**: Reservation system with status tracking and guest management\n- **BusinessHours**: Flexible scheduling system for restaurant operating hours\n\n## Security & Authentication\nImplements row-level security through Supabase with user type-based access control. Authentication state is managed globally and persisted using AsyncStorage for offline capability.\n\n# External Dependencies\n\n## Core Framework\n- **Expo SDK 54**: Development platform and build system\n- **React Native**: Mobile app framework\n- **React Navigation**: Navigation library with stack, tab, and drawer navigators\n\n## Backend Services\n- **Supabase**: Backend-as-a-Service providing authentication, PostgreSQL database, and file storage\n- **Supabase JavaScript Client**: Official client library for API interactions\n\n## State Management\n- **Zustand**: Lightweight state management library\n- **AsyncStorage**: Local storage for authentication persistence\n\n## UI Framework & Styling\n- **NativeWind v4**: Tailwind CSS for React Native - modern utility-first styling approach\n- **Tailwind CSS v3**: CSS framework powering NativeWind\n- **Gluestack UI**: Component library for consistent design system\n- **Expo Vector Icons**: Icon library\n- **React Native SVG**: Vector graphics support\n- **Expo Linear Gradient**: Gradient styling support\n\n## Device Features\n- **Expo Image Picker**: Camera and photo library access\n- **Expo Notifications**: Push notification system\n- **React Native Gesture Handler**: Touch gesture handling\n- **React Native Reanimated**: Advanced animations\n\n## Development Tools\n- **TypeScript**: Type safety and developer experience\n- **Metro**: JavaScript bundler configured for Replit environment\n- **React Native Screens**: Native screen optimization\n\n## Environment Configuration\nThe application requires Supabase environment variables (EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY) for backend connectivity, with graceful fallbacks for development environments.\n\n# Recent Changes\n\n## October 1, 2025 - NativeWind Migration (Modern Styling)\n- **Modernized styling approach** from StyleSheet to NativeWind (Tailwind CSS for React Native)\n- Successfully migrated OnboardingScreen to use className utility syntax\n- Installed and configured NativeWind v4 with Tailwind CSS v3\n- Updated Babel and Metro configurations for NativeWind support\n- Added TypeScript types for className IntelliSense\n- Created global.css with Tailwind directives\n- **Visual design preserved exactly** - no regressions or UI changes\n- Code is now cleaner and more maintainable with Tailwind utilities\n- Gradient colors maintained: dark purple (#453063 at 86% opacity) to black (#000000)\n- Architecture review: PASS - Migration well-executed with improved code quality\n\n## October 1, 2025 - Fresh GitHub Clone Import\n- Successfully imported JAW Restaurant app from fresh GitHub clone to Replit environment\n- Installed all npm dependencies using --legacy-peer-deps flag (required for Tamagui and React Native compatibility)\n- Configured Metro bundler for Replit proxy environment:\n  - Removed invalid server.host configuration from metro.config.js\n  - Added EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0 environment variable to package.json web script\n  - Configured to bind to port 5000 as required by Replit\n- Set up Expo Web Server workflow successfully running on port 5000\n- Configured deployment for autoscale target with production optimization flags (--no-dev --minify)\n- Verified application is fully functional and accessible via Replit webview\n- Application displays onboarding screens correctly with JAW branding\n- Note: Supabase environment variables (EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY) need to be configured in Replit secrets for full backend functionality\n\n## Previous Onboarding Implementation\n- Implemented complete 4-screen onboarding flow with React Native best practices\n- Features dark purple to black gradient background with dining scene illustrations\n- Uses useWindowDimensions for responsive sizing and modern React Native patterns","size_bytes":6867},"src/app/shared/screens/TermsScreen.tsx":{"content":"","size_bytes":0},"src/app/navigation/AuthNavigator.tsx":{"content":"import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Text, View } from 'react-native';\nimport { RegisterRestaurantScreen } from '@/features/auth/screens/RegisterRestaurantScreen';\n\nconst Stack = createStackNavigator();\n\n// Placeholder Login Screen\nconst LoginScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text>Login Screen</Text>\n  </View>\n);\n\n// Placeholder Register Screen for Diners\nconst RegisterScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text>Register Screen (Diner)</Text>\n  </View>\n);\n\ninterface AuthNavigatorProps {\n  userType: 'diner' | 'owner';\n  onBackToWelcome?: () => void;\n}\n\nexport const AuthNavigator: React.FC<AuthNavigatorProps> = ({ userType, onBackToWelcome }) => {\n  return (\n    <Stack.Navigator \n      screenOptions={{ headerShown: false }}\n      initialRouteName={userType === 'owner' ? 'RegisterRestaurant' : 'Login'}\n    >\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Register\" component={RegisterScreen} />\n      <Stack.Screen name=\"RegisterRestaurant\">\n        {(props) => <RegisterRestaurantScreen {...props} onBackToWelcome={onBackToWelcome} />}\n      </Stack.Screen>\n    </Stack.Navigator>\n  );\n};","size_bytes":1325},"ContactUsScreen.tsx":{"content":"","size_bytes":0},"FAQScreen.tsx":{"content":"","size_bytes":0},"src/features/onboarding/screens/OnboardingScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, Image, TouchableOpacity, StatusBar, useWindowDimensions, DimensionValue } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useUIStore } from '@/store/uiStore';\n\ninterface OnboardingData {\n  id: number;\n  title: string;\n  image: any;\n  containerStyle: {\n    borderRadius: number;\n    width: DimensionValue;\n    height: DimensionValue;\n  };\n}\n\nconst onboardingData: OnboardingData[] = [\n  {\n    id: 1,\n    title: 'Discover the perfect vibe for every occasion',\n    image: require('../../../../assets/illustration-dining.png'),\n    containerStyle: {\n      borderRadius: 150,\n      width: '85%',\n      height: '40%',\n    },\n  },\n  {\n    id: 2,\n    title: 'Share your moments with reviews, photos, and videos',\n    image: require('../../../../assets/illustration-reviews.png'),\n    containerStyle: {\n      borderRadius: 120,\n      width: '80%',\n      height: '35%',\n    },\n  },\n  {\n    id: 3,\n    title: 'Easily grow and promote all your businesses',\n    image: require('../../../../assets/illustration-business.png'),\n    containerStyle: {\n      borderRadius: 100,\n      width: '75%',\n      height: '32%',\n    },\n  },\n  {\n    id: 4,\n    title: 'Book a table and create lasting memories',\n    image: require('../../../../assets/illustration-booking.png'),\n    containerStyle: {\n      borderRadius: 150,\n      width: '80%',\n      height: '55%',\n    },\n  },\n];\n\ninterface OnboardingScreenProps {\n  onComplete: () => void;\n}\n\nexport const OnboardingScreen: React.FC<OnboardingScreenProps> = ({ onComplete }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const { setOnboardingCompleted } = useUIStore();\n  const { height } = useWindowDimensions();\n\n  const handleNext = () => {\n    if (currentIndex < onboardingData.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    } else {\n      handleComplete();\n    }\n  };\n\n  const handleSkip = () => {\n    handleComplete();\n  };\n\n  const handleComplete = () => {\n    setOnboardingCompleted(true);\n    onComplete();\n  };\n\n  const currentItem = onboardingData[currentIndex];\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      {/* Dark Purple to Black Gradient */}\n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          {/* Header with Logo and Skip Button */}\n          <View className=\"flex-row justify-between items-center px-6 pt-2 pb-6\">\n            {/* JAW Logo - centered */}\n            <View className=\"absolute left-0 right-0 items-center z-0\">\n              <Text className=\"text-[40px] font-bold text-white tracking-[2px] italic\">\n                JAW\n              </Text>\n            </View>\n            \n            {/* Skip Button - positioned at top right */}\n            <View className=\"flex-1\" />\n            <TouchableOpacity \n              onPress={handleSkip}\n              className=\"z-10 py-2 px-1\"\n            >\n              <Text className=\"text-[17px] text-white font-normal\">Skip</Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Title - positioned in upper-middle area */}\n          <View \n            className=\"px-[37.5px]\"\n            style={{ marginTop: height * 0.15 }}\n          >\n            <Text className=\"text-[28px] font-semibold text-white text-center leading-9 max-w-[300px] self-center\">\n              {currentItem.title}\n            </Text>\n          </View>\n\n          {/* Illustration Container - centered */}\n          <View className=\"flex-1 justify-center items-center px-6 -mt-5\">\n            <View \n              className=\"justify-center items-center\"\n              style={currentItem.containerStyle}\n            >\n              <Image\n                source={currentItem.image}\n                className=\"w-[90%] h-[90%]\"\n                resizeMode=\"contain\"\n              />\n            </View>\n          </View>\n\n          {/* Bottom Section */}\n          <View className=\"px-8 pb-10\">\n            {/* Pagination Dots */}\n            <View className=\"flex-row justify-center mb-6\">\n              {onboardingData.map((_, index) => (\n                <View\n                  key={index}\n                  className={`w-2 h-2 rounded-full mx-1 ${\n                    index === currentIndex\n                      ? 'bg-white'\n                      : 'bg-transparent border border-white/50'\n                  }`}\n                />\n              ))}\n            </View>\n\n            {/* Next Button */}\n            <TouchableOpacity\n              onPress={handleNext}\n              className=\"bg-[#8B5DFF] py-[18px] rounded-xl shadow-lg shadow-[#8B5DFF]/30\"\n            >\n              <Text className=\"text-white text-[17px] font-semibold text-center\">\n                Next\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":5160},"src/app/shared/screens/FAQScreen.tsx":{"content":"","size_bytes":0},"src/features/hooks/useAuth.ts":{"content":"import { useAuthStore } from '@/store/authStore';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { User } from '@/types/models';\r\n\r\nexport const useAuth = () => {\r\n  const { user, isLoading, setUser, setLoading, logout } = useAuthStore();\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      // Fetch user profile\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', data.user.id)\r\n        .single();\r\n\r\n      const userProfile: User = {\r\n        id: data.user.id,\r\n        email: data.user.email!,\r\n        fullName: profile?.full_name,\r\n        phone: profile?.phone,\r\n        userType: profile?.user_type,\r\n        avatarUrl: profile?.avatar_url,\r\n        createdAt: profile?.created_at,\r\n      };\r\n\r\n      setUser(userProfile);\r\n      return { user: userProfile, error: null };\r\n    } catch (error: any) {\r\n      return { user: null, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signUp = async (\r\n    email: string,\r\n    password: string,\r\n    userData: {\r\n      fullName: string;\r\n      userType: 'diner' | 'owner';\r\n      phone?: string;\r\n    }\r\n  ) => {\r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      // Create user profile\r\n      if (data.user) {\r\n        const { error: profileError } = await supabase\r\n          .from('profiles')\r\n          .insert({\r\n            id: data.user.id,\r\n            full_name: userData.fullName,\r\n            user_type: userData.userType,\r\n            phone: userData.phone,\r\n          });\r\n\r\n        if (profileError) throw profileError;\r\n      }\r\n\r\n      return { user: data.user, error: null };\r\n    } catch (error: any) {\r\n      return { user: null, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signOut = async () => {\r\n    await supabase.auth.signOut();\r\n    logout();\r\n  };\r\n\r\n  return {\r\n    user,\r\n    isLoading,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n  };\r\n};","size_bytes":2310},"src/types/api.ts":{"content":"export interface ApiResponse<T> {\n  data: T | null;\n  error: string | null;\n  success: boolean;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  count: number;\n  page: number;\n  totalPages: number;\n}\n\nexport interface SearchFilters {\n  category?: string;\n  priceRange?: number[];\n  rating?: number;\n  distance?: number;\n  amenities?: string[];\n}","size_bytes":354},"src/hooks/useLanguage.ts":{"content":"","size_bytes":0},"src/lib/notifications.ts":{"content":"","size_bytes":0},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./App.{js,jsx,ts,tsx}\",\n    \"./index.ts\"\n  ],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {\n      colors: {\n        'dark-purple': '#453063',\n        'pure-black': '#000000',\n      },\n    },\n  },\n  plugins: [],\n}\n","size_bytes":350},"src/hooks/useTheme.ts":{"content":"import { useUIStore } from '@/store/uiStore';\n\nexport const useTheme = () => {\n  const { theme, toggleTheme } = useUIStore();\n\n  const colors = {\n    light: {\n      background: '#FFFFFF',\n      surface: '#F8F9FA',\n      text: '#2C3E50',\n      textSecondary: '#7F8C8D',\n      primary: '#E67E22',\n      border: '#E1E1E1',\n      card: '#FFFFFF',\n    },\n    dark: {\n      background: '#1A1A1A',\n      surface: '#2C2C2C',\n      text: '#FFFFFF',\n      textSecondary: '#BDC3C7',\n      primary: '#E67E22',\n      border: '#3A3A3A',\n      card: '#2C2C2C',\n    },\n  };\n\n  return {\n    theme,\n    colors: colors[theme],\n    toggleTheme,\n  };\n};","size_bytes":632},"src/index.tsx":{"content":"","size_bytes":0},"babel.config.js":{"content":"process.env.TAMAGUI_TARGET = 'native'\n\nmodule.exports = function (api) {\n  api.cache.using(() => process.env.NODE_ENV);\n  \n  const plugins = [\n    [\n      '@tamagui/babel-plugin',\n      {\n        components: ['tamagui'],\n        config: './tamagui.config.ts',\n        logTimings: true,\n      },\n    ],\n  ];\n\n  // Temporarily disable reanimated plugin entirely to fix worklets dependency issue\n  // TODO: Re-enable after resolving react-native-worklets compatibility\n\n  return {\n    presets: [\n      ['babel-preset-expo', { jsxImportSource: 'nativewind' }],\n      'nativewind/babel',\n    ],\n    plugins,\n  };\n};","size_bytes":610},"api.ts":{"content":"","size_bytes":0},"tamagui.config.ts":{"content":"import { createTamagui } from '@tamagui/core'\nimport { createInterFont } from '@tamagui/font-inter'\nimport { createMedia } from '@tamagui/react-native-media-driver'\nimport { createTokens } from '@tamagui/core'\nimport { shorthands } from '@tamagui/shorthands'\nimport { themes, tokens as defaultTokens } from '@tamagui/themes'\nimport { createAnimations } from '@tamagui/animations-react-native'\n\nconst interFont = createInterFont({\n  size: {\n    1: 11,\n    2: 12,\n    3: 13,\n    4: 14,\n    true: 14,\n    5: 16,\n    6: 18,\n    7: 20,\n    8: 23,\n    9: 30,\n    10: 46,\n    11: 55,\n    12: 62,\n    13: 72,\n    14: 92,\n    15: 114,\n    16: 134,\n  },\n  weight: {\n    1: '300',\n    2: '400',\n    6: '600',\n    7: '700',\n  },\n  letterSpacing: {\n    1: 0,\n    2: -0.15,\n    5: -0.69,\n    6: -0.72,\n    7: -0.8,\n    8: -0.906,\n    9: -0.975,\n    10: -1.1,\n    12: -1.18,\n    14: -1.37,\n    15: -1.5,\n  },\n})\n\nconst tokens = createTokens({\n  ...defaultTokens,\n  color: {\n    ...defaultTokens.color,\n    // JAW Restaurant Dark Theme Colors\n    jawBackground: '#000000',\n    jawSurface: '#1C1C1C',\n    jawPrimary: '#FFD700',\n    jawPrimaryLight: '#FFE766',\n    jawSuccess: '#4CAF50',\n    jawWarning: '#FFC107',\n    jawError: '#F44336',\n    jawTextPrimary: '#FFFFFF',\n    jawTextSecondary: '#B3B3B3',\n    jawTextMuted: '#808080',\n    jawIcon: '#FFD700',\n    jawBorder: '#333333',\n  },\n})\n\nconst jawDarkTheme = {\n  ...themes.dark,\n  background: tokens.color.jawBackground,\n  backgroundHover: tokens.color.jawSurface,\n  backgroundPress: tokens.color.jawSurface,\n  backgroundFocus: tokens.color.jawSurface,\n  backgroundStrong: tokens.color.jawSurface,\n  backgroundTransparent: 'rgba(0, 0, 0, 0)',\n  color: tokens.color.jawTextPrimary,\n  colorHover: tokens.color.jawTextPrimary,\n  colorPress: tokens.color.jawTextSecondary,\n  colorFocus: tokens.color.jawPrimary,\n  colorTransparent: 'rgba(255, 255, 255, 0)',\n  borderColor: tokens.color.jawBorder,\n  borderColorHover: tokens.color.jawPrimary,\n  borderColorFocus: tokens.color.jawPrimary,\n  borderColorPress: tokens.color.jawPrimaryLight,\n  placeholderColor: tokens.color.jawTextMuted,\n  // Primary colors\n  blue: tokens.color.jawPrimary,\n  blueHover: tokens.color.jawPrimaryLight,\n  green: tokens.color.jawSuccess,\n  red: tokens.color.jawError,\n  yellow: tokens.color.jawWarning,\n}\n\nconst media = createMedia({\n  xs: { maxWidth: 660 },\n  sm: { maxWidth: 800 },\n  md: { maxWidth: 1020 },\n  lg: { maxWidth: 1280 },\n  xl: { maxWidth: 1420 },\n  xxl: { maxWidth: 1600 },\n  gtXs: { minWidth: 660 + 1 },\n  gtSm: { minWidth: 800 + 1 },\n  gtMd: { minWidth: 1020 + 1 },\n  gtLg: { minWidth: 1280 + 1 },\n  short: { maxHeight: 820 },\n  tall: { minHeight: 820 },\n  hoverNone: { hover: 'none' },\n  pointerCoarse: { pointer: 'coarse' },\n})\n\nconst animations = createAnimations({\n  bouncy: {\n    type: 'spring',\n    damping: 10,\n    mass: 0.9,\n    stiffness: 100,\n  },\n  lazy: {\n    type: 'spring',\n    damping: 20,\n    stiffness: 60,\n  },\n  quick: {\n    type: 'spring',\n    damping: 20,\n    mass: 1.2,\n    stiffness: 250,\n  },\n})\n\nconst config = createTamagui({\n  defaultFont: 'body',\n  animations,\n  shouldAddPrefersColorThemes: false,\n  themeClassNameOnRoot: false,\n  shorthands,\n  fonts: {\n    body: interFont,\n    heading: interFont,\n  },\n  tokens,\n  themes: {\n    jaw_dark: jawDarkTheme,\n  },\n  media,\n})\n\nexport type AppConfig = typeof config\n\ndeclare module '@tamagui/core' {\n  interface TamaguiCustomConfig extends AppConfig {}\n}\n\nexport default config","size_bytes":3475},"src/theme/index.ts":{"content":"// JAW Restaurant Dark Theme System\nexport const JAW_THEME = {\n  // Root CSS variables that match your specification\n  colors: {\n    // Backgrounds\n    background: '#000000',   // Main background (dark/black)\n    surface: '#1C1C1C',     // Cards / secondary surfaces\n    \n    // Primary Accents  \n    primary: '#FFD700',     // Gold/Yellow highlight\n    primaryLight: '#FFE766', // Lighter gold shade for hover/active states\n    \n    // Status Colors\n    success: '#4CAF50',     // Approved (green)\n    warning: '#FFC107',     // Pending (amber/yellow)\n    error: '#F44336',       // Closed/Rejected (red)\n    \n    // Text Colors\n    textPrimary: '#FFFFFF',  // Main text (white)\n    textSecondary: '#B3B3B3', // Subtext/labels (light gray)  \n    textMuted: '#808080',    // Muted/inactive text\n    \n    // Icons / Borders\n    icon: '#FFD700',        // Gold icons\n    border: '#333333',      // Divider lines / borders\n  },\n  \n  // CSS custom properties for web compatibility\n  cssVariables: {\n    '--color-background': '#000000',\n    '--color-surface': '#1C1C1C',\n    '--color-primary': '#FFD700',\n    '--color-primary-light': '#FFE766',\n    '--color-success': '#4CAF50',\n    '--color-warning': '#FFC107',  \n    '--color-error': '#F44336',\n    '--color-text-primary': '#FFFFFF',\n    '--color-text-secondary': '#B3B3B3',\n    '--color-text-muted': '#808080',\n    '--color-icon': '#FFD700',\n    '--color-border': '#333333',\n  }\n} as const;\n\nexport type JAWTheme = typeof JAW_THEME;","size_bytes":1480},"src/app/navigation/UserNavigator.tsx":{"content":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Text, View } from 'react-native';\n\nconst Tab = createBottomTabNavigator();\n\n// Placeholder screens for diner users\nconst HomeScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text>Home - Find Restaurants</Text>\n  </View>\n);\n\nconst BookingsScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text>My Bookings</Text>\n  </View>\n);\n\nconst ProfileScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text>User Profile</Text>\n  </View>\n);\n\nexport const UserNavigator = () => {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Bookings\" component={BookingsScreen} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n};","size_bytes":964},"src/store/userStore.ts":{"content":"","size_bytes":0},"src/UserNavigator.tsx":{"content":"","size_bytes":0},"src/components/Avatar.tsx":{"content":"import React from 'react';\nimport { Image, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '@/hooks/useTheme';\n\ninterface AvatarProps {\n  source?: { uri: string };\n  size?: number;\n  onPress?: () => void;\n  showEditIcon?: boolean;\n}\n\nexport const Avatar: React.FC<AvatarProps> = ({\n  source,\n  size = 50,\n  onPress,\n  showEditIcon = false,\n}) => {\n  const { colors } = useTheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      position: 'relative',\n    },\n    avatar: {\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: colors.surface,\n    },\n    placeholder: {\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: colors.surface,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    editIcon: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      backgroundColor: colors.primary,\n      width: 20,\n      height: 20,\n      borderRadius: 10,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  });\n\n  const AvatarComponent = (\n    <View style={styles.container}>\n      {source?.uri ? (\n        <Image source={source} style={styles.avatar} />\n      ) : (\n        <View style={styles.placeholder}>\n          <Ionicons name=\"person\" size={size * 0.5} color={colors.textSecondary} />\n        </View>\n      )}\n      {showEditIcon && (\n        <View style={styles.editIcon}>\n          <Ionicons name=\"pencil\" size={12} color=\"#FFFFFF\" />\n        </View>\n      )}\n    </View>\n  );\n\n  if (onPress) {\n    return (\n      <TouchableOpacity onPress={onPress} activeOpacity={0.8}>\n        {AvatarComponent}\n      </TouchableOpacity>\n    );\n  }\n\n  return AvatarComponent;\n};","size_bytes":1786},"src/features/auth/screens/RegisterRestaurantScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  Dimensions,\n  Platform,\n  KeyboardAvoidingView,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\n\ninterface RegisterRestaurantScreenProps {\n  navigation?: any;\n  onBackToWelcome?: () => void;\n}\n\nexport const RegisterRestaurantScreen: React.FC<RegisterRestaurantScreenProps> = ({ navigation, onBackToWelcome }) => {\n  const [restaurantName, setRestaurantName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [address, setAddress] = useState('');\n  const [type, setType] = useState('');\n  const [cuisineType, setCuisineType] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleSubmit = () => {\n    console.log('Submitting restaurant registration...');\n  };\n\n  const isSmallScreen = SCREEN_WIDTH < 375;\n  const isMediumScreen = SCREEN_WIDTH < 414;\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <KeyboardAvoidingView \n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            className=\"flex-1\"\n          >\n            <View className=\"flex-1 px-5\">\n              {/* Header with Back Button */}\n              <View className=\"flex-row items-center pt-2 pb-2\">\n                <TouchableOpacity \n                  onPress={() => {\n                    if (onBackToWelcome) {\n                      onBackToWelcome();\n                    } else {\n                      navigation?.goBack();\n                    }\n                  }}\n                  className=\"p-2 -ml-2\"\n                >\n                  <Text className=\"text-white text-xl\">←</Text>\n                </TouchableOpacity>\n              </View>\n\n              {/* JAW Logo */}\n              <Text \n                className=\"font-bold text-white text-center tracking-[2px] italic mb-2\"\n                style={{ fontSize: isSmallScreen ? 24 : 28 }}\n              >\n                JAW\n              </Text>\n\n              {/* Title */}\n              <Text \n                className=\"font-bold text-white text-center mb-1\"\n                style={{ fontSize: isSmallScreen ? 18 : 20 }}\n              >\n                Register Restaurant\n              </Text>\n\n              {/* Subtitle */}\n              <Text \n                className=\"text-white/60 text-center mb-3\"\n                style={{ fontSize: isSmallScreen ? 11 : 12 }}\n              >\n                Enter your restaurant details to submit a request\n              </Text>\n\n              {/* Form Fields */}\n              <View className=\"flex-1\">\n                {/* Restaurant Name */}\n                <Text className=\"text-white mb-1\" style={{ fontSize: 12 }}>\n                  Restaurant Name\n                </Text>\n                <TextInput\n                  value={restaurantName}\n                  onChangeText={setRestaurantName}\n                  placeholder=\"eg Romanes\"\n                  placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                  className=\"bg-white/10 border border-white/20 rounded-lg text-white mb-2\"\n                  style={{ paddingHorizontal: 12, paddingVertical: 10, fontSize: 13 }}\n                />\n\n                {/* Email and Phone */}\n                <View className=\"flex-row mb-2\" style={{ gap: 8 }}>\n                  <View className=\"flex-1\">\n                    <Text className=\"text-white mb-1\" style={{ fontSize: 12 }}>Email</Text>\n                    <TextInput\n                      value={email}\n                      onChangeText={setEmail}\n                      placeholder=\"exemple@gmail.com\"\n                      placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                      keyboardType=\"email-address\"\n                      autoCapitalize=\"none\"\n                      className=\"bg-white/10 border border-white/20 rounded-lg text-white\"\n                      style={{ paddingHorizontal: 12, paddingVertical: 10, fontSize: 13 }}\n                    />\n                  </View>\n                  <View className=\"flex-1\">\n                    <Text className=\"text-white mb-1\" style={{ fontSize: 12 }}>Phone</Text>\n                    <TextInput\n                      value={phone}\n                      onChangeText={setPhone}\n                      placeholder=\"+21261234567\"\n                      placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                      keyboardType=\"phone-pad\"\n                      className=\"bg-white/10 border border-white/20 rounded-lg text-white\"\n                      style={{ paddingHorizontal: 12, paddingVertical: 10, fontSize: 13 }}\n                    />\n                  </View>\n                </View>\n\n                {/* Address */}\n                <Text className=\"text-white mb-1\" style={{ fontSize: 12 }}>Address</Text>\n                <TextInput\n                  value={address}\n                  onChangeText={setAddress}\n                  placeholder=\"eg 123 Main st, City\"\n                  placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                  className=\"bg-white/10 border border-white/20 rounded-lg text-white mb-2\"\n                  style={{ paddingHorizontal: 12, paddingVertical: 10, fontSize: 13 }}\n                />\n\n                {/* Type and Cuisine Type */}\n                <View className=\"flex-row mb-2\" style={{ gap: 8 }}>\n                  <View className=\"flex-1\">\n                    <Text className=\"text-white mb-1\" style={{ fontSize: 12 }}>Type</Text>\n                    <View className=\"bg-white/10 border border-white/20 rounded-lg flex-row justify-between items-center\" style={{ paddingHorizontal: 12, paddingVertical: 10 }}>\n                      <Text className=\"text-white/40\" style={{ fontSize: 13 }}>\n                        {type || 'Select Type'}\n                      </Text>\n                      <Text className=\"text-white/40\" style={{ fontSize: 13 }}>▼</Text>\n                    </View>\n                  </View>\n                  <View className=\"flex-1\">\n                    <Text className=\"text-white mb-1\" style={{ fontSize: 12 }}>Cuisine type</Text>\n                    <TextInput\n                      value={cuisineType}\n                      onChangeText={setCuisineType}\n                      placeholder=\"eg Italian, Mexican\"\n                      placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                      className=\"bg-white/10 border border-white/20 rounded-lg text-white\"\n                      style={{ paddingHorizontal: 12, paddingVertical: 10, fontSize: 13 }}\n                    />\n                  </View>\n                </View>\n\n                {/* About Your Business */}\n                <Text className=\"text-white mb-1\" style={{ fontSize: 12 }}>About your business</Text>\n                <TextInput\n                  value={description}\n                  onChangeText={setDescription}\n                  placeholder=\"Description your restaurant\"\n                  placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                  multiline\n                  numberOfLines={3}\n                  textAlignVertical=\"top\"\n                  className=\"bg-white/10 border border-white/20 rounded-lg text-white mb-3\"\n                  style={{ \n                    paddingHorizontal: 12, \n                    paddingVertical: 10,\n                    fontSize: 13,\n                    height: 60,\n                  }}\n                />\n\n                {/* Submit Button */}\n                <TouchableOpacity\n                  onPress={handleSubmit}\n                  className=\"bg-[#8B5DFF] rounded-xl\"\n                  style={{ paddingVertical: 14, marginBottom: 8 }}\n                >\n                  <Text className=\"text-white font-semibold text-center\" style={{ fontSize: 16 }}>\n                    Submit\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </KeyboardAvoidingView>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":8449},"src/app/providers/TamaguiProvider.tsx":{"content":"import React from 'react';\nimport { TamaguiProvider as BaseTamaguiProvider } from '@tamagui/core';\nimport config from '../../../tamagui.config';\n\ninterface TamaguiProviderProps {\n  children: React.ReactNode;\n}\n\nexport const TamaguiProvider: React.FC<TamaguiProviderProps> = ({ children }) => {\n  return (\n    <BaseTamaguiProvider config={config} defaultTheme=\"jaw_dark\">\n      {children}\n    </BaseTamaguiProvider>\n  );\n};","size_bytes":422},"nativewind-env.d.ts":{"content":"/// <reference types=\"nativewind/types\" />\n","size_bytes":43},"src/store/uiStore.ts":{"content":"import { create } from 'zustand';\n\ninterface UIState {\n  theme: 'light' | 'dark';\n  language: 'en' | 'fr' | 'es';\n  isBottomSheetOpen: boolean;\n  activeTab: string;\n  searchQuery: string;\n  selectedCategory: string | null;\n  hasCompletedOnboarding: boolean;\n  toggleTheme: () => void;\n  setLanguage: (language: 'en' | 'fr' | 'es') => void;\n  setBottomSheetOpen: (isOpen: boolean) => void;\n  setActiveTab: (tab: string) => void;\n  setSearchQuery: (query: string) => void;\n  setSelectedCategory: (category: string | null) => void;\n  setOnboardingCompleted: (completed: boolean) => void;\n}\n\nexport const useUIStore = create<UIState>((set) => ({\n  theme: 'dark',\n  language: 'en',\n  isBottomSheetOpen: false,\n  activeTab: 'home',\n  searchQuery: '',\n  selectedCategory: null,\n  hasCompletedOnboarding: false,\n  toggleTheme: () => set((state) => ({ theme: state.theme === 'light' ? 'dark' : 'light' })),\n  setLanguage: (language) => set({ language }),\n  setBottomSheetOpen: (isBottomSheetOpen) => set({ isBottomSheetOpen }),\n  setActiveTab: (activeTab) => set({ activeTab }),\n  setSearchQuery: (searchQuery) => set({ searchQuery }),\n  setSelectedCategory: (selectedCategory) => set({ selectedCategory }),\n  setOnboardingCompleted: (hasCompletedOnboarding) => set({ hasCompletedOnboarding }),\n}));","size_bytes":1290},"models.ts":{"content":"","size_bytes":0},"metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getDefaultConfig(__dirname);\n\n// Tamagui configuration - merge with defaults to preserve 'cjs' and other extensions\nconst { sourceExts } = config.resolver;\nconfig.resolver.sourceExts = [\n  ...sourceExts,\n  'tamagui.ts',\n  'tamagui.tsx',\n  'mjs',\n];\n\nmodule.exports = withNativeWind(config, { input: './global.css' });","size_bytes":448},"src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport { Platform } from 'react-native';\n\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn('⚠️  Supabase environment variables not configured. Please add EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY to your Replit secrets.');\n}\n\n// Create storage options based on platform\nconst getStorageOptions = () => {\n  if (Platform.OS === 'web') {\n    return typeof window !== 'undefined' ? window.localStorage : undefined;\n  } else {\n    // For native, dynamically require AsyncStorage\n    try {\n      const AsyncStorage = require('@react-native-async-storage/async-storage').default;\n      return AsyncStorage;\n    } catch (e) {\n      console.warn('AsyncStorage not available, auth sessions will not persist');\n      return undefined;\n    }\n  }\n};\n\nexport const supabase = createClient(\n  supabaseUrl || 'https://placeholder.supabase.co',\n  supabaseAnonKey || 'placeholder-anon-key',\n  {\n    auth: {\n      storage: getStorageOptions(),\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: false,\n    },\n  }\n);","size_bytes":1236},"src/components/themed/Input.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { Input as TamaguiInput } from 'tamagui';\n\nexport const Input = styled(TamaguiInput, {\n  backgroundColor: '$jawSurface',\n  borderColor: '$jawBorder',\n  borderWidth: 1,\n  borderRadius: '$2',\n  color: '$jawTextPrimary',\n  placeholderTextColor: '$jawTextMuted',\n\n  variants: {\n    size: {\n      small: { size: '$3' },\n      medium: { size: '$4' },\n      large: { size: '$5' },\n    },\n    hasError: {\n      true: {\n        borderColor: '$jawError',\n        borderWidth: 2,\n      },\n    },\n  },\n\n  defaultVariants: {\n    size: 'medium',\n  },\n\n  focusStyle: {\n    borderColor: '$jawPrimary',\n    borderWidth: 2,\n  },\n});","size_bytes":661},"src/features/auth/screens/WelcomeScreen.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity, SafeAreaView } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\n\ninterface WelcomeScreenProps {\n  onSelectRole: (role: 'diner' | 'owner') => void;\n}\n\nexport const WelcomeScreen: React.FC<WelcomeScreenProps> = ({\n  onSelectRole,\n}) => {\n  return (\n    <View className=\"flex-1\">\n      {/* Dark Purple Gradient Background - same as onboarding */}\n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <View className=\"flex-1 justify-center items-center px-6\">\n            <View className=\"w-full max-w-[400px]\">\n              {/* JAW Logo */}\n              <Text className=\"text-[60px] font-bold text-white text-center mb-6 tracking-[2px] italic\">\n                JAW\n              </Text>\n\n              {/* Welcome Title */}\n              <Text className=\"text-[32px] font-bold text-white text-center mb-3\">\n                Welcome to JAW\n              </Text>\n\n              {/* Subtitle */}\n              <Text className=\"text-[17px] text-white/80 text-center mb-12\">\n                Join our community now\n              </Text>\n\n              {/* Buttons */}\n              <View className=\"gap-4\">\n                {/* Owner Button - Purple */}\n                <TouchableOpacity\n                  onPress={() => onSelectRole('owner')}\n                  className=\"bg-[#8B5DFF] py-[18px] rounded-xl\"\n                >\n                  <Text className=\"text-white text-[17px] font-semibold text-center\">\n                    I'm an Owner\n                  </Text>\n                </TouchableOpacity>\n\n                {/* User Button - White */}\n                <TouchableOpacity\n                  onPress={() => onSelectRole('diner')}\n                  className=\"bg-white py-[18px] rounded-xl\"\n                >\n                  <Text className=\"text-[#2D2D4A] text-[17px] font-semibold text-center\">\n                    I'm a user\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":2286},"src/app/navigation/index.tsx":{"content":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useAuthStore } from '@/store/authStore';\nimport { useUIStore } from '@/store/uiStore';\nimport { WelcomeScreen } from '@/features/auth/screens/WelcomeScreen';\nimport { OnboardingScreen } from '@/features/onboarding/screens/OnboardingScreen';\nimport { AuthNavigator } from './AuthNavigator';\nimport { UserNavigator } from './UserNavigator';\nimport { OwnerNavigator } from './OwnerNavigator';\n\nconst Stack = createStackNavigator();\n\nexport const RootNavigator = () => {\n  const { isAuthenticated, userType } = useAuthStore();\n  const { hasCompletedOnboarding } = useUIStore();\n  const [selectedRole, setSelectedRole] = React.useState<'diner' | 'owner' | null>(null);\n\n  const handleRoleSelection = (role: 'diner' | 'owner') => {\n    setSelectedRole(role);\n  };\n\n  const handleBackToWelcome = () => {\n    setSelectedRole(null);\n  };\n\n  const handleOnboardingComplete = () => {\n    // Navigation will automatically update when hasCompletedOnboarding changes\n  };\n\n  // Show onboarding if not completed\n  if (!hasCompletedOnboarding) {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Onboarding\">\n            {() => <OnboardingScreen onComplete={handleOnboardingComplete} />}\n          </Stack.Screen>\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n\n  if (!isAuthenticated && !selectedRole) {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Welcome\">\n            {() => <WelcomeScreen onSelectRole={handleRoleSelection} />}\n          </Stack.Screen>\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n\n  if (!isAuthenticated && selectedRole) {\n    return (\n      <NavigationContainer>\n        <AuthNavigator userType={selectedRole} onBackToWelcome={handleBackToWelcome} />\n      </NavigationContainer>\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      {userType === 'diner' ? <UserNavigator /> : <OwnerNavigator />}\n    </NavigationContainer>\n  );\n};","size_bytes":2225},"TermsScreen.tsx":{"content":"","size_bytes":0},"src/components/Input.tsx":{"content":"","size_bytes":0},"src/app/shared/screens/ContactUsScreen.tsx":{"content":"","size_bytes":0},"src/app/App.tsx":{"content":"import React, { useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { RootNavigator } from './navigation';\nimport { useAuthStore } from '@/store/authStore';\nimport { supabase } from '@/lib/supabase';\nimport { TamaguiProvider } from './providers/TamaguiProvider';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport '../../global.css';\n\nexport default function App() {\n  const { setUser, setLoading } = useAuthStore();\n\n  useEffect(() => {\n    // Check active session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      if (session) {\n        // Fetch user profile\n        supabase\n          .from('profiles')\n          .select('*')\n          .eq('id', session.user.id)\n          .single()\n          .then(({ data: profile }) => {\n            if (profile) {\n              setUser({\n                id: session.user.id,\n                email: session.user.email!,\n                fullName: profile.full_name,\n                phone: profile.phone,\n                userType: profile.user_type,\n                avatarUrl: profile.avatar_url,\n                createdAt: profile.created_at,\n                updatedAt: profile.updated_at || profile.created_at,\n              });\n            }\n          });\n      }\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      if (session) {\n        // User signed in\n        supabase\n          .from('profiles')\n          .select('*')\n          .eq('id', session.user.id)\n          .single()\n          .then(({ data: profile }) => {\n            if (profile) {\n              setUser({\n                id: session.user.id,\n                email: session.user.email!,\n                fullName: profile.full_name,\n                phone: profile.phone,\n                userType: profile.user_type,\n                avatarUrl: profile.avatar_url,\n                createdAt: profile.created_at,\n                updatedAt: profile.updated_at || profile.created_at,\n              });\n            }\n          });\n      } else {\n        // User signed out\n        setUser(null);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <TamaguiProvider>\n        <StatusBar style=\"auto\" />\n        <RootNavigator />\n      </TamaguiProvider>\n    </GestureHandlerRootView>\n  );\n}","size_bytes":2474},"src/OwnerNavigator.tsx":{"content":"","size_bytes":0},"src/app/shared/components/SideMenu.tsx":{"content":"","size_bytes":0},"index.ts":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './src/app/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":315},"src/types/models.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  fullName?: string;\n  phone?: string;\n  userType: 'diner' | 'owner';\n  avatarUrl?: string;\n  bio?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Restaurant {\n  id: string;\n  ownerId: string;\n  name: string;\n  description?: string;\n  cuisineTypes: string[];\n  address: string;\n  city: string;\n  phone: string;\n  email: string;\n  rating: number;\n  reviewCount: number;\n  priceRange: 1 | 2 | 3 | 4;\n  images: string[];\n  coverImage: string;\n  amenities: string[];\n  businessHours: BusinessHours;\n  isVerified: boolean;\n  createdAt: string;\n  location: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\nexport interface BusinessHours {\n  [key: string]: {\n    open: string;\n    close: string;\n    isClosed: boolean;\n  };\n}\n\nexport interface Booking {\n  id: string;\n  userId: string;\n  restaurantId: string;\n  bookingDate: string;\n  bookingTime: string;\n  partySize: number;\n  status: 'pending' | 'approved' | 'declined' | 'completed' | 'cancelled' | 'closed';\n  specialRequests?: string;\n  tableSection?: string;\n  createdAt: string;\n  restaurant?: Restaurant;\n  user?: User;\n}\n\nexport interface Review {\n  id: string;\n  userId: string;\n  restaurantId: string;\n  bookingId?: string;\n  rating: number;\n  comment?: string;\n  images?: string[];\n  createdAt: string;\n  user?: User;\n}\n\nexport interface Category {\n  id: string;\n  name: string;\n  image: string;\n  icon: string;\n}\n\nexport interface Notification {\n  id: string;\n  userId: string;\n  type: 'booking' | 'review' | 'promotion' | 'social';\n  title: string;\n  message: string;\n  data?: any;\n  isRead: boolean;\n  createdAt: string;\n}\n\nexport interface OwnerStats {\n  totalViews: number;\n  totalImpressions: number;\n  weeklyViews: number[];\n  monthlyBookings: number;\n  averageRating: number;\n  growthPercentage: number;\n}","size_bytes":1853},"src/components/Button.tsx":{"content":"import React from 'react';\r\nimport {\r\n  TouchableOpacity,\r\n  Text,\r\n  StyleSheet,\r\n  ActivityIndicator,\r\n  ViewStyle,\r\n  TextStyle,\r\n} from 'react-native';\r\n\r\ninterface ButtonProps {\r\n  title: string;\r\n  onPress: () => void;\r\n  variant?: 'primary' | 'secondary' | 'outline';\r\n  size?: 'small' | 'medium' | 'large';\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  style?: ViewStyle;\r\n  textStyle?: TextStyle;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = ({\r\n  title,\r\n  onPress,\r\n  variant = 'primary',\r\n  size = 'medium',\r\n  disabled = false,\r\n  loading = false,\r\n  style,\r\n  textStyle,\r\n}) => {\r\n  return (\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.base,\r\n        styles[variant],\r\n        styles[size],\r\n        disabled && styles.disabled,\r\n        style,\r\n      ]}\r\n      onPress={onPress}\r\n      disabled={disabled || loading}\r\n      activeOpacity={0.8}\r\n    >\r\n      {loading ? (\r\n        <ActivityIndicator\r\n          color={variant === 'primary' ? '#FFFFFF' : '#E67E22'}\r\n          size=\"small\"\r\n        />\r\n      ) : (\r\n        <Text style={[styles.text, styles[`${variant}Text`], textStyle]}>\r\n          {title}\r\n        </Text>\r\n      )}\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  base: {\r\n    borderRadius: 12,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderWidth: 1,\r\n    borderColor: 'transparent',\r\n  },\r\n  primary: {\r\n    backgroundColor: '#E67E22',\r\n  },\r\n  secondary: {\r\n    backgroundColor: '#F8F9FA',\r\n  },\r\n  outline: {\r\n    backgroundColor: 'transparent',\r\n    borderColor: '#E67E22',\r\n  },\r\n  small: {\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 16,\r\n  },\r\n  medium: {\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 24,\r\n  },\r\n  large: {\r\n    paddingVertical: 16,\r\n    paddingHorizontal: 32,\r\n  },\r\n  disabled: {\r\n    backgroundColor: '#BDC3C7',\r\n    borderColor: '#BDC3C7',\r\n  },\r\n  text: {\r\n    fontWeight: '600',\r\n    fontSize: 16,\r\n  },\r\n  primaryText: {\r\n    color: '#FFFFFF',\r\n  },\r\n  secondaryText: {\r\n    color: '#2C3E50',\r\n  },\r\n  outlineText: {\r\n    color: '#E67E22',\r\n  },\r\n});","size_bytes":2093},"src/app/navigation/OwnerNavigator.tsx":{"content":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Text, View } from 'react-native';\n\nconst Tab = createBottomTabNavigator();\n\n// Placeholder screens for restaurant owners\nconst DashboardScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text>Restaurant Dashboard</Text>\n  </View>\n);\n\nconst BookingsManagementScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text>Manage Bookings</Text>\n  </View>\n);\n\nconst RestaurantProfileScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n    <Text>Restaurant Profile</Text>\n  </View>\n);\n\nexport const OwnerNavigator = () => {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Dashboard\" component={DashboardScreen} />\n      <Tab.Screen name=\"Bookings\" component={BookingsManagementScreen} />\n      <Tab.Screen name=\"Restaurant\" component={RestaurantProfileScreen} />\n    </Tab.Navigator>\n  );\n};","size_bytes":1036},"src/AuthNavigator.tsx":{"content":"","size_bytes":0},"src/features/auth/hooks/useAuth.ts":{"content":"import { useAuthStore } from '@/store/authStore';\nimport { supabase } from '@/lib/supabase';\nimport { User } from '@/types/models';\nimport { ApiResponse } from '@/types/api';\n\nexport const useAuth = () => {\n  const { user, isLoading, setUser, setLoading, logout } = useAuthStore();\n\n  const signIn = async (email: string, password: string): Promise<ApiResponse<User>> => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', data.user.id)\n        .single();\n\n      const userProfile: User = {\n        id: data.user.id,\n        email: data.user.email!,\n        fullName: profile?.full_name,\n        phone: profile?.phone,\n        userType: profile?.user_type,\n        avatarUrl: profile?.avatar_url,\n        bio: profile?.bio,\n        createdAt: profile?.created_at,\n        updatedAt: profile?.updated_at,\n      };\n\n      setUser(userProfile);\n      return { data: userProfile, error: null, success: true };\n    } catch (error: any) {\n      return { data: null, error: error.message, success: false };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (\n    email: string,\n    password: string,\n    userData: {\n      fullName: string;\n      userType: 'diner' | 'owner';\n      phone?: string;\n    }\n  ): Promise<ApiResponse<User>> => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      if (data.user) {\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .insert({\n            id: data.user.id,\n            full_name: userData.fullName,\n            user_type: userData.userType,\n            phone: userData.phone,\n          });\n\n        if (profileError) throw profileError;\n\n        const userProfile: User = {\n          id: data.user.id,\n          email: data.user.email!,\n          fullName: userData.fullName,\n          phone: userData.phone,\n          userType: userData.userType,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n\n        setUser(userProfile);\n        return { data: userProfile, error: null, success: true };\n      }\n\n      return { data: null, error: 'Failed to create user', success: false };\n    } catch (error: any) {\n      return { data: null, error: error.message, success: false };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async (): Promise<boolean> => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      logout();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  return {\n    user,\n    isLoading,\n    signIn,\n    signUp,\n    signOut,\n  };\n};","size_bytes":2961},"src/components/Card.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet, ViewStyle } from 'react-native';\nimport { useTheme } from '@/hooks/useTheme';\n\ninterface CardProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n  padding?: number;\n  margin?: number;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  children,\n  style,\n  padding = 16,\n  margin = 0,\n}) => {\n  const { colors } = useTheme();\n\n  const styles = StyleSheet.create({\n    card: {\n      backgroundColor: colors.card,\n      borderRadius: 12,\n      padding,\n      margin,\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 2,\n      },\n      shadowOpacity: 0.1,\n      shadowRadius: 3.84,\n      elevation: 5,\n    },\n  });\n\n  return <View style={[styles.card, style]}>{children}</View>;\n};","size_bytes":768},"app.config.js":{"content":"export default {\n  expo: {\n    name: \"JAW Restaurant\",\n    slug: \"jaw-restaurant\",\n    version: \"1.0.0\",\n    orientation: \"portrait\",\n    icon: \"./assets/icon.png\",\n    userInterfaceStyle: \"automatic\",\n    splash: {\n      image: \"./assets/splash-icon.png\",\n      resizeMode: \"contain\",\n      backgroundColor: \"#ffffff\"\n    },\n    assetBundlePatterns: [\"**/*\"],\n    ios: {\n      supportsTablet: true,\n      bundleIdentifier: \"com.jaw.restaurant\"\n    },\n    android: {\n      adaptiveIcon: {\n        foregroundImage: \"./assets/adaptive-icon.png\",\n        backgroundColor: \"#ffffff\"\n      },\n      package: \"com.jaw.restaurant\"\n    },\n    web: {\n      favicon: \"./assets/favicon.png\",\n      bundler: \"metro\"\n    },\n    devClient: {\n      silentLaunch: true\n    },\n    plugins: [\n      \"expo-router\",\n      [\n        \"expo-notifications\",\n        {\n          icon: \"./assets/icon.png\",\n          color: \"#ffffff\"\n        }\n      ]\n    ]\n  }\n};","size_bytes":938},"src/components/Loader.tsx":{"content":"import React from 'react';\nimport { View, ActivityIndicator, StyleSheet, Text } from 'react-native';\nimport { useTheme } from '@/hooks/useTheme';\n\ninterface LoaderProps {\n  size?: 'small' | 'large';\n  text?: string;\n  fullScreen?: boolean;\n}\n\nexport const Loader: React.FC<LoaderProps> = ({\n  size = 'large',\n  text,\n  fullScreen = false,\n}) => {\n  const { colors } = useTheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 20,\n    },\n    fullScreen: {\n      ...StyleSheet.absoluteFillObject,\n      backgroundColor: colors.background,\n    },\n    text: {\n      marginTop: 16,\n      fontSize: 16,\n      color: colors.textSecondary,\n      textAlign: 'center',\n    },\n  });\n\n  return (\n    <View style={[styles.container, fullScreen && styles.fullScreen]}>\n      <ActivityIndicator size={size} color={colors.primary} />\n      {text && <Text style={styles.text}>{text}</Text>}\n    </View>\n  );\n};","size_bytes":977},"src/lib/storage.ts":{"content":"import { supabase } from './supabase';\n\nexport class StorageService {\n  static async uploadImage(file: any, bucket: string, path: string): Promise<string | null> {\n    try {\n      const { data, error } = await supabase.storage\n        .from(bucket)\n        .upload(path, file);\n\n      if (error) throw error;\n\n      const { data: { publicUrl } } = supabase.storage\n        .from(bucket)\n        .getPublicUrl(data.path);\n\n      return publicUrl;\n    } catch (error) {\n      console.error('Upload error:', error);\n      return null;\n    }\n  }\n\n  static async deleteImage(bucket: string, path: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.storage\n        .from(bucket)\n        .remove([path]);\n\n      return !error;\n    } catch (error) {\n      console.error('Delete error:', error);\n      return false;\n    }\n  }\n}","size_bytes":844},"src/lib/supabase.web.ts":{"content":"// Web-safe Supabase client that doesn't cause bundling issues\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn('⚠️  Supabase environment variables not configured. Please add EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY to your Replit secrets.');\n}\n\nexport const supabase = createClient(\n  supabaseUrl || 'https://placeholder.supabase.co',\n  supabaseAnonKey || 'placeholder-anon-key',\n  {\n    auth: {\n      // Use localStorage for web instead of AsyncStorage\n      storage: typeof window !== 'undefined' ? window.localStorage : undefined,\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: false,\n    },\n  }\n);","size_bytes":848},"src/store/authStore.ts":{"content":"import { create } from 'zustand';\r\nimport { User } from '@/types/models';\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  isLoading: boolean;\r\n  isAuthenticated: boolean;\r\n  userType: 'diner' | 'owner' | null;\r\n  setUser: (user: User | null) => void;\r\n  setLoading: (loading: boolean) => void;\r\n  logout: () => void;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>((set) => ({\r\n  user: null,\r\n  isLoading: true,\r\n  isAuthenticated: false,\r\n  userType: null,\r\n  setUser: (user) =>\r\n    set({\r\n      user,\r\n      isAuthenticated: !!user,\r\n      userType: user?.userType || null,\r\n    }),\r\n  setLoading: (isLoading) => set({ isLoading }),\r\n  logout: () =>\r\n    set({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      userType: null,\r\n    }),\r\n}));\r\n","size_bytes":759}},"version":2}