{"file_contents":{"src/components/themed/Loader.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { Spinner } from 'tamagui';\n\nexport const Loader = styled(Spinner, {\n  color: '$jawPrimary',\n\n  variants: {\n    size: {\n      small: { size: 'small' },\n      medium: { size: 'large' },\n      large: { size: 'large' },\n    },\n  },\n\n  defaultVariants: {\n    size: 'medium',\n  },\n});","size_bytes":326},"src/components/themed/Avatar.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { Avatar as TamaguiAvatar } from 'tamagui';\n\nexport const Avatar = styled(TamaguiAvatar, {\n  circular: true,\n  backgroundColor: '$jawSurface',\n  borderColor: '$jawBorder',\n  borderWidth: 1,\n\n  variants: {\n    size: {\n      small: { size: '$6' },\n      medium: { size: '$8' },\n      large: { size: '$10' },\n    },\n  },\n\n  defaultVariants: {\n    size: 'medium',\n  },\n});\n\n// Export Avatar sub-components for easier usage\nexport const AvatarImage = TamaguiAvatar.Image;\nexport const AvatarFallback = styled(TamaguiAvatar.Fallback, {\n  backgroundColor: '$jawPrimary',\n  color: '$jawBackground',\n  fontWeight: '600',\n});","size_bytes":662},"global.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n","size_bytes":59},"src/components/themed/Button.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { Button as TamaguiButton } from 'tamagui';\n\nexport const Button = styled(TamaguiButton, {\n  borderRadius: '$2',\n  fontWeight: '600',\n\n  variants: {\n    size: {\n      small: { size: '$3' },\n      medium: { size: '$4' },\n      large: { size: '$5' },\n    },\n    variant: {\n      primary: {\n        backgroundColor: '$jawPrimary',\n        color: '$jawBackground',\n        hoverStyle: {\n          backgroundColor: '$jawPrimaryLight',\n        },\n        pressStyle: {\n          backgroundColor: '$jawPrimaryLight',\n          scale: 0.98,\n        },\n      },\n      outline: {\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderColor: '$jawPrimary',\n        color: '$jawPrimary',\n        hoverStyle: {\n          backgroundColor: '$jawPrimary',\n          color: '$jawBackground',\n        },\n        pressStyle: {\n          backgroundColor: '$jawPrimaryLight',\n          color: '$jawBackground',\n          scale: 0.98,\n        },\n      },\n      ghost: {\n        backgroundColor: 'transparent',\n        color: '$color',\n        hoverStyle: {\n          backgroundColor: '$jawSurface',\n        },\n        pressStyle: {\n          backgroundColor: '$jawSurface',\n          scale: 0.98,\n        },\n      },\n    },\n  },\n\n  defaultVariants: {\n    size: 'medium',\n    variant: 'primary',\n  },\n});","size_bytes":1352},"src/components/themed/Card.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { YStack } from 'tamagui';\n\nexport const Card = styled(YStack, {\n  backgroundColor: '$jawSurface',\n  borderRadius: '$3',\n  padding: '$4',\n  borderWidth: 1,\n  borderColor: '$jawBorder',\n\n  variants: {\n    elevation: {\n      none: {},\n      small: {\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 1 },\n        shadowOpacity: 0.22,\n        shadowRadius: 2.22,\n        elevation: 3,\n      },\n      medium: {\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n      },\n      large: {\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 4 },\n        shadowOpacity: 0.30,\n        shadowRadius: 4.65,\n        elevation: 8,\n      },\n    },\n  },\n\n  defaultVariants: {\n    elevation: 'small',\n  },\n});","size_bytes":884},"replit.md":{"content":"# Overview\n\nJAW Restaurant is a React Native mobile application built with Expo that connects diners with restaurant owners. The app provides a dual-sided platform where users can discover and book restaurants, while restaurant owners can manage their establishments and bookings. The application supports both light and dark themes, multiple languages, and includes features like user authentication, restaurant search and filtering, booking management, and push notifications.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application follows a modular React Native architecture using Expo as the development platform. The codebase is organized with TypeScript for type safety and uses a feature-based folder structure with shared components.\n\n**Navigation System**: Implements React Navigation with separate navigation stacks for authenticated users (UserNavigator for diners, OwnerNavigator for restaurant owners) and unauthenticated users (AuthNavigator). The RootNavigator manages the overall navigation flow based on authentication state and user type.\n\n**State Management**: Uses Zustand for lightweight state management with separate stores for authentication (authStore), UI state (uiStore), and user-specific data. This provides a simple and performant alternative to Redux while maintaining type safety.\n\n**Component Architecture**: Follows a component-driven approach with reusable UI components (Button, Card, Avatar, Loader, Input) that support theming and consistent styling across the application.\n\n**Theme System**: Implements a custom theming solution with light and dark mode support, managed through the useTheme hook and stored in the UI store for persistence across app sessions.\n\n## Backend Architecture\n**Authentication Service**: Integrates with Supabase for user authentication, supporting email/password login with automatic session management and token refresh.\n\n**Database Design**: Uses Supabase PostgreSQL database with a profiles table structure that extends the default auth.users table to store additional user information including user type (diner/owner), profile details, and preferences.\n\n**API Layer**: Implements a service-oriented architecture with Supabase client for database operations, including CRUD operations for users, restaurants, and bookings.\n\n**File Storage**: Leverages Supabase Storage for handling image uploads (profile pictures, restaurant images) with public URL generation and file management capabilities.\n\n## Data Models\nThe application defines clear TypeScript interfaces for core entities:\n- **User**: Supports both diner and owner types with profile information\n- **Restaurant**: Complete restaurant data including business hours, location, amenities, and ratings\n- **Booking**: Reservation system with status tracking and guest management\n- **BusinessHours**: Flexible scheduling system for restaurant operating hours\n\n## Security & Authentication\nImplements row-level security through Supabase with user type-based access control. Authentication state is managed globally and persisted using AsyncStorage for offline capability.\n\n# External Dependencies\n\n## Core Framework\n- **Expo SDK 54**: Development platform and build system\n- **React Native**: Mobile app framework\n- **React Navigation**: Navigation library with stack, tab, and drawer navigators\n\n## Backend Services\n- **Supabase**: Backend-as-a-Service providing authentication, PostgreSQL database, and file storage\n- **Supabase JavaScript Client**: Official client library for API interactions\n\n## State Management\n- **Zustand**: Lightweight state management library\n- **AsyncStorage**: Local storage for authentication persistence\n\n## UI Framework & Styling\n- **NativeWind v4**: Tailwind CSS for React Native - modern utility-first styling approach\n- **Tailwind CSS v3**: CSS framework powering NativeWind\n- **Gluestack UI**: Component library for consistent design system\n- **Lucide React Native**: Modern icon library with consistent design and tree-shakable imports\n- **React Native SVG**: Vector graphics support\n- **Expo Linear Gradient**: Gradient styling support\n\n## Device Features\n- **Expo Image Picker**: Camera and photo library access\n- **Expo Notifications**: Push notification system\n- **React Native Gesture Handler**: Touch gesture handling\n- **React Native Reanimated**: Advanced animations\n\n## Development Tools\n- **TypeScript**: Type safety and developer experience\n- **Metro**: JavaScript bundler configured for Replit environment\n- **React Native Screens**: Native screen optimization\n\n## Environment Configuration\nThe application requires Supabase environment variables (EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY) for backend connectivity, with graceful fallbacks for development environments.\n\n# Recent Changes\n\n## October 15, 2025 - Main App Screens Implementation\n- **Built complete post-authentication user experience** with 8 new screens\n- **User Screens (Diner Role)**:\n  - **HomeScreen**: Category selection with circular layout featuring Cafe, Morocco Way, Fine Dining, Dance, Loung & Pub, and Chiringuito categories with purple gradient background\n  - **DiscoverScreen**: Restaurant search and discovery with category filters, search bar, QR code scanner, and restaurant card listings\n  - **VenueDetailsScreen**: Complete restaurant details with tabbed interface (Overview, Menu, Bookings), image gallery, cuisine tags, location map placeholder, contact information\n  - **BookingScreen**: Modal-based reservation system with guest counter, interactive calendar, time slot selection, and booking confirmation\n  - **ReviewsScreen**: Reviews feed with star ratings, user comments, and inline review submission with star rating and text input\n  - **RestaurantCard Component**: Reusable card component displaying restaurant images, ratings, location, and favorite toggle\n- **Owner Screens (Restaurant Owner Role)**:\n  - **FeedScreen**: Social feed with Best Chef horizontal carousel, restaurant posts with engagement stats (likes, comments, ratings), and quick action menu (Start Live, Add Story, Add PIN)\n- **Navigation Integration**: \n  - Updated UserNavigator with 5-tab bottom navigation (Home, Search, Favorites, Bookings, Profile)\n  - Implemented stack navigation for Home tab to handle screen transitions (Home → Discover → VenueDetails → Booking/Reviews)\n  - Updated OwnerNavigator with 5-tab layout (Feed, Discover, Add, Bookings, Profile)\n  - All tabs styled with purple accent color (#8B5DFF) and dark theme\n- **Design System**: Consistent dark theme implementation across all screens with purple accents, proper spacing, and responsive layouts\n- Architecture review: All screens functionally complete with proper navigation flow\n\n## October 15, 2025 - Lucide Icon Migration\n- **Migrated from @expo/vector-icons to lucide-react-native** for all icon usage across the application\n- **Avatar Component**: Updated to use Lucide's User and Pencil icons\n- **Navigation Icons**: Added tab bar icons to both UserNavigator (Home, Calendar, UserCircle) and OwnerNavigator (LayoutDashboard, Calendar, Store)\n- **Auth Screen Icons**: Replaced all emoji icons with proper Lucide icons:\n  - Mail, Lock, Eye, EyeOff icons for input fields\n  - ArrowLeft for back navigation\n  - KeyRound for password reset screens\n- Benefits: Consistent icon design, better performance with tree-shaking, more professional appearance\n- All icons properly sized and colored to match the app's design system\n- Architecture review: PASS - Lucide migration functionally correct with no blocking issues\n\n## October 15, 2025 - Complete Authentication Flow Implementation\n- **Built complete authentication system** with 6 screens matching the design specifications\n- **SignInScreen**: Email/password login with Google/Facebook social login options, remember me checkbox, and forgot password link\n- **SignUpScreen**: User registration with first/last name, email, password fields and social login options\n- **ForgotPasswordScreen**: Password recovery with email input and KeyRound icon from Lucide\n- **VerifyEmailScreen**: 6-digit OTP verification with auto-focus between inputs and resend code functionality\n- **EnterNewPasswordScreen**: New password entry with confirmation and password visibility toggle\n- **RegisterRestaurantScreen**: Full-width scrollable form for restaurant owner registration\n- **AuthNavigator**: Complete navigation flow wiring all auth screens with proper transitions\n- All screens use consistent purple gradient background (rgba(69, 48, 99, 0.86) to #000000)\n- Logo integration across all auth screens using the JAW logo image\n- Responsive design with proper keyboard handling and ScrollView support\n- Architecture review: PASS - All screens meet design requirements and follow best practices\n\n## October 15, 2025 - Logo Integration\n- Replaced all \"JAW\" text instances with the official logo image\n- Updated OnboardingScreen, WelcomeScreen, and all auth screens with logo\n- Logo properly sized and positioned for each screen context\n\n## October 15, 2025 - Project Import and Setup\n- Completed project import from GitHub to Replit environment\n- Installed all npm dependencies using --legacy-peer-deps flag\n- Configured and verified Expo Web Server workflow running successfully on port 5000\n\n## October 1, 2025 - NativeWind Migration (Modern Styling)\n- **Modernized styling approach** from StyleSheet to NativeWind (Tailwind CSS for React Native)\n- Successfully migrated OnboardingScreen to use className utility syntax\n- Installed and configured NativeWind v4 with Tailwind CSS v3\n- Updated Babel and Metro configurations for NativeWind support\n- Added TypeScript types for className IntelliSense\n- Created global.css with Tailwind directives\n- **Visual design preserved exactly** - no regressions or UI changes\n- Code is now cleaner and more maintainable with Tailwind utilities\n- Gradient colors maintained: dark purple (#453063 at 86% opacity) to black (#000000)\n- Architecture review: PASS - Migration well-executed with improved code quality\n\n## October 1, 2025 - Fresh GitHub Clone Import\n- Successfully imported JAW Restaurant app from fresh GitHub clone to Replit environment\n- Installed all npm dependencies using --legacy-peer-deps flag (required for Tamagui and React Native compatibility)\n- Configured Metro bundler for Replit proxy environment:\n  - Removed invalid server.host configuration from metro.config.js\n  - Added EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0 environment variable to package.json web script\n  - Configured to bind to port 5000 as required by Replit\n- Set up Expo Web Server workflow successfully running on port 5000\n- Configured deployment for autoscale target with production optimization flags (--no-dev --minify)\n- Verified application is fully functional and accessible via Replit webview\n- Application displays onboarding screens correctly with JAW branding\n- Note: Supabase environment variables (EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY) need to be configured in Replit secrets for full backend functionality\n\n## Previous Onboarding Implementation\n- Implemented complete 4-screen onboarding flow with React Native best practices\n- Features dark purple to black gradient background with dining scene illustrations\n- Uses useWindowDimensions for responsive sizing and modern React Native patterns","size_bytes":11411},"src/app/shared/screens/TermsScreen.tsx":{"content":"","size_bytes":0},"src/app/navigation/AuthNavigator.tsx":{"content":"import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { RegisterRestaurantScreen } from '@/features/auth/screens/RegisterRestaurantScreen';\nimport { SignInScreen } from '@/features/auth/screens/SignInScreen';\nimport { SignUpScreen } from '@/features/auth/screens/SignUpScreen';\nimport { ForgotPasswordScreen } from '@/features/auth/screens/ForgotPasswordScreen';\nimport { VerifyEmailScreen } from '@/features/auth/screens/VerifyEmailScreen';\nimport { EnterNewPasswordScreen } from '@/features/auth/screens/EnterNewPasswordScreen';\n\nconst Stack = createStackNavigator();\n\ninterface AuthNavigatorProps {\n  userType: 'diner' | 'owner';\n  onBackToWelcome?: () => void;\n}\n\nexport const AuthNavigator: React.FC<AuthNavigatorProps> = ({ userType, onBackToWelcome }) => {\n  return (\n    <Stack.Navigator \n      screenOptions={{ headerShown: false }}\n      initialRouteName={userType === 'owner' ? 'RegisterRestaurant' : 'SignIn'}\n    >\n      {/* Sign In Screen */}\n      <Stack.Screen name=\"SignIn\">\n        {(props) => (\n          <SignInScreen \n            {...props} \n            onForgotPassword={() => props.navigation.navigate('ForgotPassword')}\n            onSignUp={() => props.navigation.navigate('SignUp')}\n          />\n        )}\n      </Stack.Screen>\n\n      {/* Sign Up Screen */}\n      <Stack.Screen name=\"SignUp\">\n        {(props) => (\n          <SignUpScreen \n            {...props} \n            onSignIn={() => props.navigation.navigate('SignIn')}\n          />\n        )}\n      </Stack.Screen>\n\n      {/* Forgot Password Flow */}\n      <Stack.Screen name=\"ForgotPassword\">\n        {(props) => (\n          <ForgotPasswordScreen \n            {...props} \n            onSubmit={(email) => {\n              console.log('Forgot password for:', email);\n              props.navigation.navigate('VerifyEmail');\n            }}\n            onBackToSignIn={() => props.navigation.navigate('SignIn')}\n          />\n        )}\n      </Stack.Screen>\n\n      <Stack.Screen name=\"VerifyEmail\">\n        {(props) => (\n          <VerifyEmailScreen \n            {...props} \n            onVerify={(code) => {\n              console.log('Verification code:', code);\n              props.navigation.navigate('EnterNewPassword');\n            }}\n            onResendCode={() => console.log('Resending code...')}\n          />\n        )}\n      </Stack.Screen>\n\n      <Stack.Screen name=\"EnterNewPassword\">\n        {(props) => (\n          <EnterNewPasswordScreen \n            {...props} \n            onContinue={(newPassword, confirmPassword) => {\n              console.log('New password set');\n              props.navigation.navigate('SignIn');\n            }}\n            onCancel={() => props.navigation.navigate('SignIn')}\n          />\n        )}\n      </Stack.Screen>\n\n      {/* Restaurant Registration */}\n      <Stack.Screen name=\"RegisterRestaurant\">\n        {(props) => <RegisterRestaurantScreen {...props} onBackToWelcome={onBackToWelcome} />}\n      </Stack.Screen>\n    </Stack.Navigator>\n  );\n};\n","size_bytes":3024},"ContactUsScreen.tsx":{"content":"","size_bytes":0},"FAQScreen.tsx":{"content":"","size_bytes":0},"src/features/onboarding/screens/OnboardingScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, Image, TouchableOpacity, StatusBar, useWindowDimensions, DimensionValue } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useUIStore } from '@/store/uiStore';\n\ninterface OnboardingData {\n  id: number;\n  title: string;\n  image: any;\n  containerStyle: {\n    borderRadius: number;\n    width: DimensionValue;\n    height: DimensionValue;\n  };\n}\n\nconst onboardingData: OnboardingData[] = [\n  {\n    id: 1,\n    title: 'Discover the perfect vibe for every occasion',\n    image: require('../../../../assets/illustration-dining.png'),\n    containerStyle: {\n      borderRadius: 150,\n      width: '85%',\n      height: '40%',\n    },\n  },\n  {\n    id: 2,\n    title: 'Share your moments with reviews, photos, and videos',\n    image: require('../../../../assets/illustration-reviews.png'),\n    containerStyle: {\n      borderRadius: 120,\n      width: '80%',\n      height: '35%',\n    },\n  },\n  {\n    id: 3,\n    title: 'Easily grow and promote all your businesses',\n    image: require('../../../../assets/illustration-business.png'),\n    containerStyle: {\n      borderRadius: 100,\n      width: '75%',\n      height: '32%',\n    },\n  },\n  {\n    id: 4,\n    title: 'Book a table and create lasting memories',\n    image: require('../../../../assets/illustration-booking.png'),\n    containerStyle: {\n      borderRadius: 150,\n      width: '80%',\n      height: '55%',\n    },\n  },\n];\n\ninterface OnboardingScreenProps {\n  onComplete: () => void;\n}\n\nexport const OnboardingScreen: React.FC<OnboardingScreenProps> = ({ onComplete }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const { setOnboardingCompleted } = useUIStore();\n  const { height } = useWindowDimensions();\n\n  const handleNext = () => {\n    if (currentIndex < onboardingData.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    } else {\n      handleComplete();\n    }\n  };\n\n  const handleSkip = () => {\n    handleComplete();\n  };\n\n  const handleComplete = () => {\n    setOnboardingCompleted(true);\n    onComplete();\n  };\n\n  const currentItem = onboardingData[currentIndex];\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      {/* Dark Purple to Black Gradient */}\n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          {/* Header with Logo and Skip Button */}\n          <View className=\"flex-row justify-between items-center px-6 pt-2 pb-6\">\n            {/* JAW Logo - centered */}\n            <View className=\"absolute left-0 right-0 items-center z-0\">\n              <Image\n                source={require('../../../../attached_assets/Profile Restaurent Booking_1760530725671.png')}\n                className=\"h-[40px]\"\n                resizeMode=\"contain\"\n                style={{ width: 100 }}\n              />\n            </View>\n            \n            {/* Skip Button - positioned at top right */}\n            <View className=\"flex-1\" />\n            <TouchableOpacity \n              onPress={handleSkip}\n              className=\"z-10 py-2 px-1\"\n            >\n              <Text className=\"text-[17px] text-white font-normal\">Skip</Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Title - positioned in upper-middle area */}\n          <View \n            className=\"px-[37.5px]\"\n            style={{ marginTop: height * 0.15 }}\n          >\n            <Text className=\"text-[28px] font-semibold text-white text-center leading-9 max-w-[300px] self-center\">\n              {currentItem.title}\n            </Text>\n          </View>\n\n          {/* Illustration Container - centered */}\n          <View className=\"flex-1 justify-center items-center px-6 -mt-5\">\n            <View \n              className=\"justify-center items-center\"\n              style={currentItem.containerStyle}\n            >\n              <Image\n                source={currentItem.image}\n                className=\"w-[90%] h-[90%]\"\n                resizeMode=\"contain\"\n              />\n            </View>\n          </View>\n\n          {/* Bottom Section */}\n          <View className=\"px-8 pb-10\">\n            {/* Pagination Dots */}\n            <View className=\"flex-row justify-center mb-6\">\n              {onboardingData.map((_, index) => (\n                <View\n                  key={index}\n                  className={`w-2 h-2 rounded-full mx-1 ${\n                    index === currentIndex\n                      ? 'bg-white'\n                      : 'bg-transparent border border-white/50'\n                  }`}\n                />\n              ))}\n            </View>\n\n            {/* Next Button */}\n            <TouchableOpacity\n              onPress={handleNext}\n              className=\"bg-[#8B5DFF] py-[18px] rounded-xl shadow-lg shadow-[#8B5DFF]/30\"\n            >\n              <Text className=\"text-white text-[17px] font-semibold text-center\">\n                Next\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":5290},"src/app/shared/screens/FAQScreen.tsx":{"content":"","size_bytes":0},"src/features/hooks/useAuth.ts":{"content":"import { useAuthStore } from '@/store/authStore';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { User } from '@/types/models';\r\n\r\nexport const useAuth = () => {\r\n  const { user, isLoading, setUser, setLoading, logout } = useAuthStore();\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      // Fetch user profile\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', data.user.id)\r\n        .single();\r\n\r\n      const userProfile: User = {\r\n        id: data.user.id,\r\n        email: data.user.email!,\r\n        fullName: profile?.full_name,\r\n        phone: profile?.phone,\r\n        userType: profile?.user_type,\r\n        avatarUrl: profile?.avatar_url,\r\n        createdAt: profile?.created_at,\r\n      };\r\n\r\n      setUser(userProfile);\r\n      return { user: userProfile, error: null };\r\n    } catch (error: any) {\r\n      return { user: null, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signUp = async (\r\n    email: string,\r\n    password: string,\r\n    userData: {\r\n      fullName: string;\r\n      userType: 'diner' | 'owner';\r\n      phone?: string;\r\n    }\r\n  ) => {\r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      // Create user profile\r\n      if (data.user) {\r\n        const { error: profileError } = await supabase\r\n          .from('profiles')\r\n          .insert({\r\n            id: data.user.id,\r\n            full_name: userData.fullName,\r\n            user_type: userData.userType,\r\n            phone: userData.phone,\r\n          });\r\n\r\n        if (profileError) throw profileError;\r\n      }\r\n\r\n      return { user: data.user, error: null };\r\n    } catch (error: any) {\r\n      return { user: null, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signOut = async () => {\r\n    await supabase.auth.signOut();\r\n    logout();\r\n  };\r\n\r\n  return {\r\n    user,\r\n    isLoading,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n  };\r\n};","size_bytes":2310},"src/types/api.ts":{"content":"export interface ApiResponse<T> {\n  data: T | null;\n  error: string | null;\n  success: boolean;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  count: number;\n  page: number;\n  totalPages: number;\n}\n\nexport interface SearchFilters {\n  category?: string;\n  priceRange?: number[];\n  rating?: number;\n  distance?: number;\n  amenities?: string[];\n}","size_bytes":354},"src/hooks/useLanguage.ts":{"content":"","size_bytes":0},"src/lib/notifications.ts":{"content":"","size_bytes":0},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./App.{js,jsx,ts,tsx}\",\n    \"./index.ts\"\n  ],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {\n      colors: {\n        'dark-purple': '#453063',\n        'pure-black': '#000000',\n      },\n    },\n  },\n  plugins: [],\n}\n","size_bytes":350},"src/hooks/useTheme.ts":{"content":"import { useUIStore } from '@/store/uiStore';\n\nexport const useTheme = () => {\n  const { theme, toggleTheme } = useUIStore();\n\n  const colors = {\n    light: {\n      background: '#FFFFFF',\n      surface: '#F8F9FA',\n      text: '#2C3E50',\n      textSecondary: '#7F8C8D',\n      primary: '#E67E22',\n      border: '#E1E1E1',\n      card: '#FFFFFF',\n    },\n    dark: {\n      background: '#1A1A1A',\n      surface: '#2C2C2C',\n      text: '#FFFFFF',\n      textSecondary: '#BDC3C7',\n      primary: '#E67E22',\n      border: '#3A3A3A',\n      card: '#2C2C2C',\n    },\n  };\n\n  return {\n    theme,\n    colors: colors[theme],\n    toggleTheme,\n  };\n};","size_bytes":632},"src/index.tsx":{"content":"","size_bytes":0},"babel.config.js":{"content":"process.env.TAMAGUI_TARGET = 'native'\n\nmodule.exports = function (api) {\n  api.cache.using(() => process.env.NODE_ENV);\n  \n  const plugins = [\n    [\n      '@tamagui/babel-plugin',\n      {\n        components: ['tamagui'],\n        config: './tamagui.config.ts',\n        logTimings: true,\n      },\n    ],\n  ];\n\n  // Temporarily disable reanimated plugin entirely to fix worklets dependency issue\n  // TODO: Re-enable after resolving react-native-worklets compatibility\n\n  return {\n    presets: [\n      ['babel-preset-expo', { jsxImportSource: 'nativewind' }],\n      'nativewind/babel',\n    ],\n    plugins,\n  };\n};","size_bytes":610},"api.ts":{"content":"","size_bytes":0},"tamagui.config.ts":{"content":"import { createTamagui } from '@tamagui/core'\nimport { createInterFont } from '@tamagui/font-inter'\nimport { createMedia } from '@tamagui/react-native-media-driver'\nimport { createTokens } from '@tamagui/core'\nimport { shorthands } from '@tamagui/shorthands'\nimport { themes, tokens as defaultTokens } from '@tamagui/themes'\nimport { createAnimations } from '@tamagui/animations-react-native'\n\nconst interFont = createInterFont({\n  size: {\n    1: 11,\n    2: 12,\n    3: 13,\n    4: 14,\n    true: 14,\n    5: 16,\n    6: 18,\n    7: 20,\n    8: 23,\n    9: 30,\n    10: 46,\n    11: 55,\n    12: 62,\n    13: 72,\n    14: 92,\n    15: 114,\n    16: 134,\n  },\n  weight: {\n    1: '300',\n    2: '400',\n    6: '600',\n    7: '700',\n  },\n  letterSpacing: {\n    1: 0,\n    2: -0.15,\n    5: -0.69,\n    6: -0.72,\n    7: -0.8,\n    8: -0.906,\n    9: -0.975,\n    10: -1.1,\n    12: -1.18,\n    14: -1.37,\n    15: -1.5,\n  },\n})\n\nconst tokens = createTokens({\n  ...defaultTokens,\n  color: {\n    ...defaultTokens.color,\n    // JAW Restaurant Dark Theme Colors\n    jawBackground: '#000000',\n    jawSurface: '#1C1C1C',\n    jawPrimary: '#FFD700',\n    jawPrimaryLight: '#FFE766',\n    jawSuccess: '#4CAF50',\n    jawWarning: '#FFC107',\n    jawError: '#F44336',\n    jawTextPrimary: '#FFFFFF',\n    jawTextSecondary: '#B3B3B3',\n    jawTextMuted: '#808080',\n    jawIcon: '#FFD700',\n    jawBorder: '#333333',\n  },\n})\n\nconst jawDarkTheme = {\n  ...themes.dark,\n  background: tokens.color.jawBackground,\n  backgroundHover: tokens.color.jawSurface,\n  backgroundPress: tokens.color.jawSurface,\n  backgroundFocus: tokens.color.jawSurface,\n  backgroundStrong: tokens.color.jawSurface,\n  backgroundTransparent: 'rgba(0, 0, 0, 0)',\n  color: tokens.color.jawTextPrimary,\n  colorHover: tokens.color.jawTextPrimary,\n  colorPress: tokens.color.jawTextSecondary,\n  colorFocus: tokens.color.jawPrimary,\n  colorTransparent: 'rgba(255, 255, 255, 0)',\n  borderColor: tokens.color.jawBorder,\n  borderColorHover: tokens.color.jawPrimary,\n  borderColorFocus: tokens.color.jawPrimary,\n  borderColorPress: tokens.color.jawPrimaryLight,\n  placeholderColor: tokens.color.jawTextMuted,\n  // Primary colors\n  blue: tokens.color.jawPrimary,\n  blueHover: tokens.color.jawPrimaryLight,\n  green: tokens.color.jawSuccess,\n  red: tokens.color.jawError,\n  yellow: tokens.color.jawWarning,\n}\n\nconst media = createMedia({\n  xs: { maxWidth: 660 },\n  sm: { maxWidth: 800 },\n  md: { maxWidth: 1020 },\n  lg: { maxWidth: 1280 },\n  xl: { maxWidth: 1420 },\n  xxl: { maxWidth: 1600 },\n  gtXs: { minWidth: 660 + 1 },\n  gtSm: { minWidth: 800 + 1 },\n  gtMd: { minWidth: 1020 + 1 },\n  gtLg: { minWidth: 1280 + 1 },\n  short: { maxHeight: 820 },\n  tall: { minHeight: 820 },\n  hoverNone: { hover: 'none' },\n  pointerCoarse: { pointer: 'coarse' },\n})\n\nconst animations = createAnimations({\n  bouncy: {\n    type: 'spring',\n    damping: 10,\n    mass: 0.9,\n    stiffness: 100,\n  },\n  lazy: {\n    type: 'spring',\n    damping: 20,\n    stiffness: 60,\n  },\n  quick: {\n    type: 'spring',\n    damping: 20,\n    mass: 1.2,\n    stiffness: 250,\n  },\n})\n\nconst config = createTamagui({\n  defaultFont: 'body',\n  animations,\n  shouldAddPrefersColorThemes: false,\n  themeClassNameOnRoot: false,\n  shorthands,\n  fonts: {\n    body: interFont,\n    heading: interFont,\n  },\n  tokens,\n  themes: {\n    jaw_dark: jawDarkTheme,\n  },\n  media,\n})\n\nexport type AppConfig = typeof config\n\ndeclare module '@tamagui/core' {\n  interface TamaguiCustomConfig extends AppConfig {}\n}\n\nexport default config","size_bytes":3475},"src/theme/index.ts":{"content":"// JAW Restaurant Dark Theme System\nexport const JAW_THEME = {\n  // Root CSS variables that match your specification\n  colors: {\n    // Backgrounds\n    background: '#000000',   // Main background (dark/black)\n    surface: '#1C1C1C',     // Cards / secondary surfaces\n    \n    // Primary Accents  \n    primary: '#FFD700',     // Gold/Yellow highlight\n    primaryLight: '#FFE766', // Lighter gold shade for hover/active states\n    \n    // Status Colors\n    success: '#4CAF50',     // Approved (green)\n    warning: '#FFC107',     // Pending (amber/yellow)\n    error: '#F44336',       // Closed/Rejected (red)\n    \n    // Text Colors\n    textPrimary: '#FFFFFF',  // Main text (white)\n    textSecondary: '#B3B3B3', // Subtext/labels (light gray)  \n    textMuted: '#808080',    // Muted/inactive text\n    \n    // Icons / Borders\n    icon: '#FFD700',        // Gold icons\n    border: '#333333',      // Divider lines / borders\n  },\n  \n  // CSS custom properties for web compatibility\n  cssVariables: {\n    '--color-background': '#000000',\n    '--color-surface': '#1C1C1C',\n    '--color-primary': '#FFD700',\n    '--color-primary-light': '#FFE766',\n    '--color-success': '#4CAF50',\n    '--color-warning': '#FFC107',  \n    '--color-error': '#F44336',\n    '--color-text-primary': '#FFFFFF',\n    '--color-text-secondary': '#B3B3B3',\n    '--color-text-muted': '#808080',\n    '--color-icon': '#FFD700',\n    '--color-border': '#333333',\n  }\n} as const;\n\nexport type JAWTheme = typeof JAW_THEME;","size_bytes":1480},"src/app/navigation/UserNavigator.tsx":{"content":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Home, Search, Heart, Calendar, UserCircle } from 'lucide-react-native';\nimport { HomeScreen } from '../user/screens/HomeScreen';\nimport { DiscoverScreen } from '../user/screens/DiscoverScreen';\nimport { VenueDetailsScreen } from '../user/screens/VenueDetailsScreen';\nimport { BookingScreen } from '../user/screens/BookingScreen';\nimport { ReviewsScreen } from '../user/screens/ReviewsScreen';\nimport { View, Text } from 'react-native';\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createStackNavigator();\n\nconst FavoritesScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#0a0a0f' }}>\n    <Text style={{ color: '#fff' }}>Favorites</Text>\n  </View>\n);\n\nconst BookingsScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#0a0a0f' }}>\n    <Text style={{ color: '#fff' }}>My Bookings</Text>\n  </View>\n);\n\nconst ProfileScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#0a0a0f' }}>\n    <Text style={{ color: '#fff' }}>User Profile</Text>\n  </View>\n);\n\nconst HomeStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: { backgroundColor: '#0a0a0f' },\n      }}\n    >\n      <Stack.Screen name=\"HomeMain\" component={HomeScreen} />\n      <Stack.Screen name=\"Discover\" component={DiscoverScreen} />\n      <Stack.Screen name=\"VenueDetails\" component={VenueDetailsScreen} />\n      <Stack.Screen name=\"Booking\" component={BookingScreen} />\n      <Stack.Screen name=\"Reviews\" component={ReviewsScreen} />\n    </Stack.Navigator>\n  );\n};\n\nexport const UserNavigator = () => {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        tabBarActiveTintColor: '#8B5DFF',\n        tabBarInactiveTintColor: '#666',\n        tabBarStyle: {\n          backgroundColor: '#0a0a0f',\n          borderTopColor: '#1a1a2e',\n          borderTopWidth: 1,\n          height: 60,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n        headerShown: false,\n      }}\n    >\n      <Tab.Screen \n        name=\"Home\" \n        component={HomeStack}\n        options={{\n          tabBarIcon: ({ color, size }) => <Home size={size} color={color} />\n        }}\n      />\n      <Tab.Screen \n        name=\"Search\" \n        component={DiscoverScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <Search size={size} color={color} />\n        }}\n      />\n      <Tab.Screen \n        name=\"Favorites\" \n        component={FavoritesScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <Heart size={size} color={color} />\n        }}\n      />\n      <Tab.Screen \n        name=\"Bookings\" \n        component={BookingsScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <Calendar size={size} color={color} />\n        }}\n      />\n      <Tab.Screen \n        name=\"Profile\" \n        component={ProfileScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <UserCircle size={size} color={color} />\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n","size_bytes":3281},"src/store/userStore.ts":{"content":"","size_bytes":0},"src/UserNavigator.tsx":{"content":"","size_bytes":0},"src/components/Avatar.tsx":{"content":"import React from 'react';\nimport { Image, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { User, Pencil } from 'lucide-react-native';\nimport { useTheme } from '@/hooks/useTheme';\n\ninterface AvatarProps {\n  source?: { uri: string };\n  size?: number;\n  onPress?: () => void;\n  showEditIcon?: boolean;\n}\n\nexport const Avatar: React.FC<AvatarProps> = ({\n  source,\n  size = 50,\n  onPress,\n  showEditIcon = false,\n}) => {\n  const { colors } = useTheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      position: 'relative',\n    },\n    avatar: {\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: colors.surface,\n    },\n    placeholder: {\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: colors.surface,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    editIcon: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      backgroundColor: colors.primary,\n      width: 20,\n      height: 20,\n      borderRadius: 10,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  });\n\n  const AvatarComponent = (\n    <View style={styles.container}>\n      {source?.uri ? (\n        <Image source={source} style={styles.avatar} />\n      ) : (\n        <View style={styles.placeholder}>\n          <User size={size * 0.5} color={colors.textSecondary} />\n        </View>\n      )}\n      {showEditIcon && (\n        <View style={styles.editIcon}>\n          <Pencil size={12} color=\"#FFFFFF\" />\n        </View>\n      )}\n    </View>\n  );\n\n  if (onPress) {\n    return (\n      <TouchableOpacity onPress={onPress} activeOpacity={0.8}>\n        {AvatarComponent}\n      </TouchableOpacity>\n    );\n  }\n\n  return AvatarComponent;\n};","size_bytes":1757},"src/features/auth/screens/RegisterRestaurantScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  Platform,\n  KeyboardAvoidingView,\n  Image,\n  Modal,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { ChevronLeft } from 'lucide-react-native';\n\ninterface RegisterRestaurantScreenProps {\n  navigation?: any;\n  onBackToWelcome?: () => void;\n}\n\nexport const RegisterRestaurantScreen: React.FC<RegisterRestaurantScreenProps> = ({ navigation, onBackToWelcome }) => {\n  const [restaurantName, setRestaurantName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [address, setAddress] = useState('');\n  const [type, setType] = useState('');\n  const [cuisineType, setCuisineType] = useState('');\n  const [description, setDescription] = useState('');\n  const [showTypeDropdown, setShowTypeDropdown] = useState(false);\n\n  const restaurantTypes = ['Restaurant', 'Cheringito', 'Cafe', 'Bar', 'Fast Food'];\n\n  const handleSubmit = () => {\n    console.log('Submitting restaurant registration...');\n  };\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <KeyboardAvoidingView \n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            className=\"flex-1\"\n          >\n            {/* Header with Back Button and Logo */}\n            <View className=\"flex-row items-center justify-between pt-3 pb-3 px-5\">\n              <TouchableOpacity \n                onPress={() => {\n                  if (onBackToWelcome) {\n                    onBackToWelcome();\n                  } else {\n                    navigation?.goBack();\n                  }\n                }}\n                className=\"bg-white/10 p-2 rounded-lg active:bg-white/20\"\n                activeOpacity={0.7}\n              >\n                <ChevronLeft color=\"white\" size={24} />\n              </TouchableOpacity>\n\n              {/* JAW Logo */}\n              <Image\n                source={require('../../../../attached_assets/Profile Restaurent Booking_1760530725671.png')}\n                className=\"h-[40px]\"\n                resizeMode=\"contain\"\n                style={{ width: 100 }}\n              />\n\n              {/* Spacer for alignment */}\n              <View style={{ width: 40 }} />\n            </View>\n\n            {/* Title */}\n            <Text className=\"text-2xl font-bold text-white text-center mb-2 px-5 mt-4\">\n              Register Restaurant\n            </Text>\n\n            {/* Subtitle */}\n            <Text className=\"text-sm text-white/70 text-center mb-6 px-5\">\n              Enter your restaurant details to submit a request\n            </Text>\n\n            {/* Scrollable Form */}\n            <ScrollView \n              className=\"flex-1 px-5\"\n              showsVerticalScrollIndicator={false}\n              keyboardShouldPersistTaps=\"handled\"\n            >\n              {/* Restaurant Name */}\n              <Text className=\"text-white text-sm mb-2\">\n                Restaurant Name\n              </Text>\n              <TextInput\n                value={restaurantName}\n                onChangeText={setRestaurantName}\n                placeholder=\"eg Romanes\"\n                placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                className=\"bg-white/10 border border-white/20 rounded-xl text-white px-4 py-3 mb-4\"\n                style={{ fontSize: 15 }}\n              />\n\n              {/* Email and Phone Row */}\n              <View className=\"flex-row mb-4\" style={{ gap: 12 }}>\n                <View className=\"flex-1\">\n                  <Text className=\"text-white text-sm mb-2\">Email</Text>\n                  <TextInput\n                    value={email}\n                    onChangeText={setEmail}\n                    placeholder=\"exemple@gmail.com\"\n                    placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                    keyboardType=\"email-address\"\n                    autoCapitalize=\"none\"\n                    className=\"bg-white/10 border border-white/20 rounded-xl text-white px-4 py-3\"\n                    style={{ fontSize: 15 }}\n                  />\n                </View>\n                <View className=\"flex-1\">\n                  <Text className=\"text-white text-sm mb-2\">Phone</Text>\n                  <TextInput\n                    value={phone}\n                    onChangeText={setPhone}\n                    placeholder=\"+21261234567\"\n                    placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                    keyboardType=\"phone-pad\"\n                    className=\"bg-white/10 border border-white/20 rounded-xl text-white px-4 py-3\"\n                    style={{ fontSize: 15 }}\n                  />\n                </View>\n              </View>\n\n              {/* Address */}\n              <Text className=\"text-white text-sm mb-2\">\n                Address\n              </Text>\n              <TextInput\n                value={address}\n                onChangeText={setAddress}\n                placeholder=\"eg 123 Main st, City\"\n                placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                className=\"bg-white/10 border border-white/20 rounded-xl text-white px-4 py-3 mb-4\"\n                style={{ fontSize: 15 }}\n              />\n\n              {/* Type Dropdown */}\n              <Text className=\"text-white text-sm mb-2\">\n                Type\n              </Text>\n              <TouchableOpacity \n                onPress={() => setShowTypeDropdown(true)}\n                className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 mb-4 flex-row justify-between items-center\"\n              >\n                <Text className={type ? \"text-white\" : \"text-white/40\"} style={{ fontSize: 15 }}>\n                  {type || 'Select Type'}\n                </Text>\n                <Text className=\"text-white/40\" style={{ fontSize: 14 }}>▼</Text>\n              </TouchableOpacity>\n\n              {/* Bottom Sheet Modal */}\n              <Modal\n                visible={showTypeDropdown}\n                transparent={true}\n                animationType=\"slide\"\n                onRequestClose={() => setShowTypeDropdown(false)}\n              >\n                <TouchableOpacity \n                  activeOpacity={1}\n                  onPress={() => setShowTypeDropdown(false)}\n                  className=\"flex-1 bg-black/50\"\n                >\n                  <View className=\"flex-1 justify-end\">\n                    <TouchableOpacity activeOpacity={1} onPress={(e) => e.stopPropagation()}>\n                      <View className=\"bg-[#1a1a2e] rounded-t-3xl pt-2 pb-8\">\n                        {/* Drag Handle */}\n                        <View className=\"items-center py-3\">\n                          <View className=\"w-12 h-1 bg-white/30 rounded-full\" />\n                        </View>\n                        \n                        {/* Title */}\n                        <Text className=\"text-white text-xl font-semibold text-center mb-4\">\n                          Select Type\n                        </Text>\n                        \n                        {/* Options */}\n                        {restaurantTypes.map((restaurantType, index) => (\n                          <TouchableOpacity\n                            key={index}\n                            onPress={() => {\n                              setType(restaurantType);\n                              setShowTypeDropdown(false);\n                            }}\n                            className=\"px-6 py-4 border-b border-white/5\"\n                            style={{ \n                              borderBottomWidth: index === restaurantTypes.length - 1 ? 0 : 1 \n                            }}\n                          >\n                            <Text \n                              className={type === restaurantType ? \"text-[#8B5DFF] font-semibold\" : \"text-white/70\"}\n                              style={{ fontSize: 16, textAlign: 'center' }}\n                            >\n                              {restaurantType}\n                            </Text>\n                          </TouchableOpacity>\n                        ))}\n                      </View>\n                    </TouchableOpacity>\n                  </View>\n                </TouchableOpacity>\n              </Modal>\n\n              {/* Cuisine Type */}\n              <Text className=\"text-white text-sm mb-2\">\n                Cuisine type\n              </Text>\n              <TextInput\n                value={cuisineType}\n                onChangeText={setCuisineType}\n                placeholder=\"eg Italian, Mexican\"\n                placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                className=\"bg-white/10 border border-white/20 rounded-xl text-white px-4 py-3 mb-4\"\n                style={{ fontSize: 15 }}\n              />\n\n              {/* About Your Business */}\n              <Text className=\"text-white text-sm mb-2\">\n                About your business\n              </Text>\n              <TextInput\n                value={description}\n                onChangeText={setDescription}\n                placeholder=\"Description your restaurant\"\n                placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                multiline\n                numberOfLines={5}\n                textAlignVertical=\"top\"\n                className=\"bg-white/10 border border-white/20 rounded-xl text-white px-4 py-3 mb-6\"\n                style={{ \n                  fontSize: 15,\n                  minHeight: 100,\n                }}\n              />\n\n              {/* Submit Button */}\n              <TouchableOpacity\n                onPress={handleSubmit}\n                className=\"bg-[#8B5DFF] rounded-xl py-4 mb-6\"\n              >\n                <Text className=\"text-white text-lg font-semibold text-center\">\n                  Submit\n                </Text>\n              </TouchableOpacity>\n            </ScrollView>\n          </KeyboardAvoidingView>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};","size_bytes":10306},"src/app/providers/TamaguiProvider.tsx":{"content":"import React from 'react';\nimport { TamaguiProvider as BaseTamaguiProvider } from '@tamagui/core';\nimport config from '../../../tamagui.config';\n\ninterface TamaguiProviderProps {\n  children: React.ReactNode;\n}\n\nexport const TamaguiProvider: React.FC<TamaguiProviderProps> = ({ children }) => {\n  return (\n    <BaseTamaguiProvider config={config} defaultTheme=\"jaw_dark\">\n      {children}\n    </BaseTamaguiProvider>\n  );\n};","size_bytes":422},"nativewind-env.d.ts":{"content":"/// <reference types=\"nativewind/types\" />\n","size_bytes":43},"src/store/uiStore.ts":{"content":"import { create } from 'zustand';\n\ninterface UIState {\n  theme: 'light' | 'dark';\n  language: 'en' | 'fr' | 'es';\n  isBottomSheetOpen: boolean;\n  activeTab: string;\n  searchQuery: string;\n  selectedCategory: string | null;\n  hasCompletedOnboarding: boolean;\n  toggleTheme: () => void;\n  setLanguage: (language: 'en' | 'fr' | 'es') => void;\n  setBottomSheetOpen: (isOpen: boolean) => void;\n  setActiveTab: (tab: string) => void;\n  setSearchQuery: (query: string) => void;\n  setSelectedCategory: (category: string | null) => void;\n  setOnboardingCompleted: (completed: boolean) => void;\n}\n\nexport const useUIStore = create<UIState>((set) => ({\n  theme: 'dark',\n  language: 'en',\n  isBottomSheetOpen: false,\n  activeTab: 'home',\n  searchQuery: '',\n  selectedCategory: null,\n  hasCompletedOnboarding: false,\n  toggleTheme: () => set((state) => ({ theme: state.theme === 'light' ? 'dark' : 'light' })),\n  setLanguage: (language) => set({ language }),\n  setBottomSheetOpen: (isBottomSheetOpen) => set({ isBottomSheetOpen }),\n  setActiveTab: (activeTab) => set({ activeTab }),\n  setSearchQuery: (searchQuery) => set({ searchQuery }),\n  setSelectedCategory: (selectedCategory) => set({ selectedCategory }),\n  setOnboardingCompleted: (hasCompletedOnboarding) => set({ hasCompletedOnboarding }),\n}));","size_bytes":1290},"models.ts":{"content":"","size_bytes":0},"metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getDefaultConfig(__dirname);\n\n// Tamagui configuration - merge with defaults to preserve 'cjs' and other extensions\nconst { sourceExts } = config.resolver;\nconfig.resolver.sourceExts = [\n  ...sourceExts,\n  'tamagui.ts',\n  'tamagui.tsx',\n  'mjs',\n];\n\nmodule.exports = withNativeWind(config, { input: './global.css' });","size_bytes":448},"src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport { Platform } from 'react-native';\n\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn('⚠️  Supabase environment variables not configured. Please add EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY to your Replit secrets.');\n}\n\n// Create storage options based on platform\nconst getStorageOptions = () => {\n  if (Platform.OS === 'web') {\n    return typeof window !== 'undefined' ? window.localStorage : undefined;\n  } else {\n    // For native, dynamically require AsyncStorage\n    try {\n      const AsyncStorage = require('@react-native-async-storage/async-storage').default;\n      return AsyncStorage;\n    } catch (e) {\n      console.warn('AsyncStorage not available, auth sessions will not persist');\n      return undefined;\n    }\n  }\n};\n\nexport const supabase = createClient(\n  supabaseUrl || 'https://placeholder.supabase.co',\n  supabaseAnonKey || 'placeholder-anon-key',\n  {\n    auth: {\n      storage: getStorageOptions(),\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: false,\n    },\n  }\n);","size_bytes":1236},"src/components/themed/Input.tsx":{"content":"import { styled } from '@tamagui/core';\nimport { Input as TamaguiInput } from 'tamagui';\n\nexport const Input = styled(TamaguiInput, {\n  backgroundColor: '$jawSurface',\n  borderColor: '$jawBorder',\n  borderWidth: 1,\n  borderRadius: '$2',\n  color: '$jawTextPrimary',\n  placeholderTextColor: '$jawTextMuted',\n\n  variants: {\n    size: {\n      small: { size: '$3' },\n      medium: { size: '$4' },\n      large: { size: '$5' },\n    },\n    hasError: {\n      true: {\n        borderColor: '$jawError',\n        borderWidth: 2,\n      },\n    },\n  },\n\n  defaultVariants: {\n    size: 'medium',\n  },\n\n  focusStyle: {\n    borderColor: '$jawPrimary',\n    borderWidth: 2,\n  },\n});","size_bytes":661},"src/features/auth/screens/WelcomeScreen.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity, SafeAreaView, Image } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useAuthStore } from '../../../store/authStore';\n\ninterface WelcomeScreenProps {\n  onSelectRole: (role: 'diner' | 'owner') => void;\n}\n\nexport const WelcomeScreen: React.FC<WelcomeScreenProps> = ({\n  onSelectRole,\n}) => {\n  const { setUser } = useAuthStore();\n\n  const handleDemoLogin = (userType: 'diner' | 'owner') => {\n    const demoUser = {\n      id: userType === 'diner' ? 'demo-diner-123' : 'demo-owner-123',\n      email: userType === 'diner' ? 'demo@diner.com' : 'demo@owner.com',\n      fullName: userType === 'diner' ? 'Demo Diner' : 'Demo Owner',\n      userType: userType,\n      avatarUrl: 'https://i.pravatar.cc/100?img=10',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    \n    setUser(demoUser);\n  };\n  return (\n    <View className=\"flex-1\">\n      {/* Dark Purple Gradient Background - same as onboarding */}\n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <View className=\"flex-1 justify-center items-center px-6\">\n            <View className=\"w-full max-w-[400px]\">\n              {/* JAW Logo */}\n              <View className=\"items-center mb-6\">\n                <Image\n                  source={require('../../../../attached_assets/Profile Restaurent Booking_1760530725671.png')}\n                  className=\"h-[60px]\"\n                  resizeMode=\"contain\"\n                  style={{ width: 150 }}\n                />\n              </View>\n\n              {/* Welcome Title */}\n              <Text className=\"text-[32px] font-bold text-white text-center mb-3\">\n                Welcome to JAW\n              </Text>\n\n              {/* Subtitle */}\n              <Text className=\"text-[17px] text-white/80 text-center mb-12\">\n                Join our community now\n              </Text>\n\n              {/* Buttons */}\n              <View className=\"gap-4\">\n                {/* Owner Button - Purple */}\n                <TouchableOpacity\n                  onPress={() => onSelectRole('owner')}\n                  className=\"bg-[#8B5DFF] py-[18px] rounded-xl\"\n                >\n                  <Text className=\"text-white text-[17px] font-semibold text-center\">\n                    I'm an Owner\n                  </Text>\n                </TouchableOpacity>\n\n                {/* User Button - White */}\n                <TouchableOpacity\n                  onPress={() => onSelectRole('diner')}\n                  className=\"bg-white py-[18px] rounded-xl\"\n                >\n                  <Text className=\"text-[#2D2D4A] text-[17px] font-semibold text-center\">\n                    I'm a user\n                  </Text>\n                </TouchableOpacity>\n              </View>\n\n              {/* Demo Mode Section */}\n              <View className=\"mt-8 pt-8 border-t border-white/10\">\n                <Text className=\"text-white text-lg font-semibold text-center mb-2\">\n                  Try Demo Mode\n                </Text>\n                <Text className=\"text-white/60 text-sm text-center mb-4\">\n                  Explore the app without signing up\n                </Text>\n                \n                <View className=\"flex-row gap-3\">\n                  <TouchableOpacity\n                    onPress={() => handleDemoLogin('diner')}\n                    className=\"flex-1 bg-[#8B5DFF]/20 py-4 rounded-xl border border-[#8B5DFF]\"\n                  >\n                    <Text className=\"text-[#8B5DFF] text-base font-semibold text-center\">\n                      Demo as Diner\n                    </Text>\n                  </TouchableOpacity>\n\n                  <TouchableOpacity\n                    onPress={() => handleDemoLogin('owner')}\n                    className=\"flex-1 bg-[#8B5DFF]/20 py-4 rounded-xl border border-[#8B5DFF]\"\n                  >\n                    <Text className=\"text-[#8B5DFF] text-base font-semibold text-center\">\n                      Demo as Owner\n                    </Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            </View>\n          </View>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":4410},"src/app/navigation/index.tsx":{"content":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useAuthStore } from '@/store/authStore';\nimport { useUIStore } from '@/store/uiStore';\nimport { WelcomeScreen } from '@/features/auth/screens/WelcomeScreen';\nimport { OnboardingScreen } from '@/features/onboarding/screens/OnboardingScreen';\nimport { AuthNavigator } from './AuthNavigator';\nimport { UserNavigator } from './UserNavigator';\nimport { OwnerNavigator } from './OwnerNavigator';\n\nconst Stack = createStackNavigator();\n\nexport const RootNavigator = () => {\n  const { isAuthenticated, userType } = useAuthStore();\n  const { hasCompletedOnboarding } = useUIStore();\n  const [selectedRole, setSelectedRole] = React.useState<'diner' | 'owner' | null>(null);\n\n  const handleRoleSelection = (role: 'diner' | 'owner') => {\n    setSelectedRole(role);\n  };\n\n  const handleBackToWelcome = () => {\n    setSelectedRole(null);\n  };\n\n  const handleOnboardingComplete = () => {\n    // Navigation will automatically update when hasCompletedOnboarding changes\n  };\n\n  // Show onboarding if not completed\n  if (!hasCompletedOnboarding) {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Onboarding\">\n            {() => <OnboardingScreen onComplete={handleOnboardingComplete} />}\n          </Stack.Screen>\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n\n  if (!isAuthenticated && !selectedRole) {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"Welcome\">\n            {() => <WelcomeScreen onSelectRole={handleRoleSelection} />}\n          </Stack.Screen>\n        </Stack.Navigator>    \n      </NavigationContainer>\n    );\n  }\n\n  if (!isAuthenticated && selectedRole) {\n    return (\n      <NavigationContainer>\n        <AuthNavigator userType={selectedRole} onBackToWelcome={handleBackToWelcome} />\n      </NavigationContainer>\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      {userType === 'diner' ? <UserNavigator /> : <OwnerNavigator />}\n    </NavigationContainer>\n  );\n};","size_bytes":2229},"TermsScreen.tsx":{"content":"","size_bytes":0},"src/components/Input.tsx":{"content":"","size_bytes":0},"src/app/shared/screens/ContactUsScreen.tsx":{"content":"","size_bytes":0},"src/app/App.tsx":{"content":"import React, { useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { RootNavigator } from './navigation';\nimport { useAuthStore } from '@/store/authStore';\nimport { supabase } from '@/lib/supabase';\nimport { TamaguiProvider } from './providers/TamaguiProvider';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport '../../global.css';\n\nexport default function App() {\n  const { setUser, setLoading } = useAuthStore();\n\n  useEffect(() => {\n    // Check active session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      if (session) {\n        // Fetch user profile\n        supabase\n          .from('profiles')\n          .select('*')\n          .eq('id', session.user.id)\n          .single()\n          .then(({ data: profile }) => {\n            if (profile) {\n              setUser({\n                id: session.user.id,\n                email: session.user.email!,\n                fullName: profile.full_name,\n                phone: profile.phone,\n                userType: profile.user_type,\n                avatarUrl: profile.avatar_url,\n                createdAt: profile.created_at,\n                updatedAt: profile.updated_at || profile.created_at,\n              });\n            }\n          });\n      }\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      if (session) {\n        // User signed in\n        supabase\n          .from('profiles')\n          .select('*')\n          .eq('id', session.user.id)\n          .single()\n          .then(({ data: profile }) => {\n            if (profile) {\n              setUser({\n                id: session.user.id,\n                email: session.user.email!,\n                fullName: profile.full_name,\n                phone: profile.phone,\n                userType: profile.user_type,\n                avatarUrl: profile.avatar_url,\n                createdAt: profile.created_at,\n                updatedAt: profile.updated_at || profile.created_at,\n              });\n            }\n          });\n      } else {\n        // User signed out\n        setUser(null);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <TamaguiProvider>\n        <StatusBar style=\"auto\" />\n        <RootNavigator />\n      </TamaguiProvider>\n    </GestureHandlerRootView>\n  );\n}","size_bytes":2474},"src/OwnerNavigator.tsx":{"content":"","size_bytes":0},"src/app/shared/components/SideMenu.tsx":{"content":"","size_bytes":0},"index.ts":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './src/app/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":315},"src/types/models.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  fullName?: string;\n  phone?: string;\n  userType: 'diner' | 'owner';\n  avatarUrl?: string;\n  bio?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Restaurant {\n  id: string;\n  ownerId: string;\n  name: string;\n  description?: string;\n  cuisineTypes: string[];\n  address: string;\n  city: string;\n  phone: string;\n  email: string;\n  rating: number;\n  reviewCount: number;\n  priceRange: 1 | 2 | 3 | 4;\n  images: string[];\n  coverImage: string;\n  amenities: string[];\n  businessHours: BusinessHours;\n  isVerified: boolean;\n  createdAt: string;\n  location: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\nexport interface BusinessHours {\n  [key: string]: {\n    open: string;\n    close: string;\n    isClosed: boolean;\n  };\n}\n\nexport interface Booking {\n  id: string;\n  userId: string;\n  restaurantId: string;\n  bookingDate: string;\n  bookingTime: string;\n  partySize: number;\n  status: 'pending' | 'approved' | 'declined' | 'completed' | 'cancelled' | 'closed';\n  specialRequests?: string;\n  tableSection?: string;\n  createdAt: string;\n  restaurant?: Restaurant;\n  user?: User;\n}\n\nexport interface Review {\n  id: string;\n  userId: string;\n  restaurantId: string;\n  bookingId?: string;\n  rating: number;\n  comment?: string;\n  images?: string[];\n  createdAt: string;\n  user?: User;\n}\n\nexport interface Category {\n  id: string;\n  name: string;\n  image: string;\n  icon: string;\n}\n\nexport interface Notification {\n  id: string;\n  userId: string;\n  type: 'booking' | 'review' | 'promotion' | 'social';\n  title: string;\n  message: string;\n  data?: any;\n  isRead: boolean;\n  createdAt: string;\n}\n\nexport interface OwnerStats {\n  totalViews: number;\n  totalImpressions: number;\n  weeklyViews: number[];\n  monthlyBookings: number;\n  averageRating: number;\n  growthPercentage: number;\n}","size_bytes":1853},"src/components/Button.tsx":{"content":"import React from 'react';\r\nimport {\r\n  TouchableOpacity,\r\n  Text,\r\n  StyleSheet,\r\n  ActivityIndicator,\r\n  ViewStyle,\r\n  TextStyle,\r\n} from 'react-native';\r\n\r\ninterface ButtonProps {\r\n  title: string;\r\n  onPress: () => void;\r\n  variant?: 'primary' | 'secondary' | 'outline';\r\n  size?: 'small' | 'medium' | 'large';\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  style?: ViewStyle;\r\n  textStyle?: TextStyle;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = ({\r\n  title,\r\n  onPress,\r\n  variant = 'primary',\r\n  size = 'medium',\r\n  disabled = false,\r\n  loading = false,\r\n  style,\r\n  textStyle,\r\n}) => {\r\n  return (\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.base,\r\n        styles[variant],\r\n        styles[size],\r\n        disabled && styles.disabled,\r\n        style,\r\n      ]}\r\n      onPress={onPress}\r\n      disabled={disabled || loading}\r\n      activeOpacity={0.8}\r\n    >\r\n      {loading ? (\r\n        <ActivityIndicator\r\n          color={variant === 'primary' ? '#FFFFFF' : '#E67E22'}\r\n          size=\"small\"\r\n        />\r\n      ) : (\r\n        <Text style={[styles.text, styles[`${variant}Text`], textStyle]}>\r\n          {title}\r\n        </Text>\r\n      )}\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  base: {\r\n    borderRadius: 12,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderWidth: 1,\r\n    borderColor: 'transparent',\r\n  },\r\n  primary: {\r\n    backgroundColor: '#E67E22',\r\n  },\r\n  secondary: {\r\n    backgroundColor: '#F8F9FA',\r\n  },\r\n  outline: {\r\n    backgroundColor: 'transparent',\r\n    borderColor: '#E67E22',\r\n  },\r\n  small: {\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 16,\r\n  },\r\n  medium: {\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 24,\r\n  },\r\n  large: {\r\n    paddingVertical: 16,\r\n    paddingHorizontal: 32,\r\n  },\r\n  disabled: {\r\n    backgroundColor: '#BDC3C7',\r\n    borderColor: '#BDC3C7',\r\n  },\r\n  text: {\r\n    fontWeight: '600',\r\n    fontSize: 16,\r\n  },\r\n  primaryText: {\r\n    color: '#FFFFFF',\r\n  },\r\n  secondaryText: {\r\n    color: '#2C3E50',\r\n  },\r\n  outlineText: {\r\n    color: '#E67E22',\r\n  },\r\n});","size_bytes":2093},"src/app/navigation/OwnerNavigator.tsx":{"content":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { View, Text } from 'react-native';\nimport { Home, Search, Plus, Calendar, UserCircle } from 'lucide-react-native';\nimport { FeedScreen } from '../owner/screens/FeedScreen';\n\nconst Tab = createBottomTabNavigator();\n\nconst DiscoverScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#0a0a0f' }}>\n    <Text style={{ color: '#fff' }}>Discover</Text>\n  </View>\n);\n\nconst AddScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#0a0a0f' }}>\n    <Text style={{ color: '#fff' }}>Add Content</Text>\n  </View>\n);\n\nconst BookingsScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#0a0a0f' }}>\n    <Text style={{ color: '#fff' }}>Manage Bookings</Text>\n  </View>\n);\n\nconst ProfileScreen = () => (\n  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#0a0a0f' }}>\n    <Text style={{ color: '#fff' }}>Owner Profile</Text>\n  </View>\n);\n\nexport const OwnerNavigator = () => {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        tabBarActiveTintColor: '#8B5DFF',\n        tabBarInactiveTintColor: '#666',\n        tabBarStyle: {\n          backgroundColor: '#0a0a0f',\n          borderTopColor: '#1a1a2e',\n          borderTopWidth: 1,\n          height: 60,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n        headerShown: false,\n      }}\n    >\n      <Tab.Screen \n        name=\"Feed\" \n        component={FeedScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <Home size={size} color={color} />\n        }}\n      />\n      <Tab.Screen \n        name=\"Discover\" \n        component={DiscoverScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <Search size={size} color={color} />\n        }}\n      />\n      <Tab.Screen \n        name=\"Add\" \n        component={AddScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <Plus size={size} color={color} />\n        }}\n      />\n      <Tab.Screen \n        name=\"Bookings\" \n        component={BookingsScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <Calendar size={size} color={color} />\n        }}\n      />\n      <Tab.Screen \n        name=\"Profile\" \n        component={ProfileScreen}\n        options={{\n          tabBarIcon: ({ color, size }) => <UserCircle size={size} color={color} />\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n","size_bytes":2572},"src/AuthNavigator.tsx":{"content":"","size_bytes":0},"src/features/auth/hooks/useAuth.ts":{"content":"import { useAuthStore } from '@/store/authStore';\nimport { supabase } from '@/lib/supabase';\nimport { User } from '@/types/models';\nimport { ApiResponse } from '@/types/api';\n\nexport const useAuth = () => {\n  const { user, isLoading, setUser, setLoading, logout } = useAuthStore();\n\n  const signIn = async (email: string, password: string): Promise<ApiResponse<User>> => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', data.user.id)\n        .single();\n\n      const userProfile: User = {\n        id: data.user.id,\n        email: data.user.email!,\n        fullName: profile?.full_name,\n        phone: profile?.phone,\n        userType: profile?.user_type,\n        avatarUrl: profile?.avatar_url,\n        bio: profile?.bio,\n        createdAt: profile?.created_at,\n        updatedAt: profile?.updated_at,\n      };\n\n      setUser(userProfile);\n      return { data: userProfile, error: null, success: true };\n    } catch (error: any) {\n      return { data: null, error: error.message, success: false };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (\n    email: string,\n    password: string,\n    userData: {\n      fullName: string;\n      userType: 'diner' | 'owner';\n      phone?: string;\n    }\n  ): Promise<ApiResponse<User>> => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      if (data.user) {\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .insert({\n            id: data.user.id,\n            full_name: userData.fullName,\n            user_type: userData.userType,\n            phone: userData.phone,\n          });\n\n        if (profileError) throw profileError;\n\n        const userProfile: User = {\n          id: data.user.id,\n          email: data.user.email!,\n          fullName: userData.fullName,\n          phone: userData.phone,\n          userType: userData.userType,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n\n        setUser(userProfile);\n        return { data: userProfile, error: null, success: true };\n      }\n\n      return { data: null, error: 'Failed to create user', success: false };\n    } catch (error: any) {\n      return { data: null, error: error.message, success: false };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async (): Promise<boolean> => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      logout();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  return {\n    user,\n    isLoading,\n    signIn,\n    signUp,\n    signOut,\n  };\n};","size_bytes":2961},"src/components/Card.tsx":{"content":"import React from 'react';\nimport { View, StyleSheet, ViewStyle } from 'react-native';\nimport { useTheme } from '@/hooks/useTheme';\n\ninterface CardProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n  padding?: number;\n  margin?: number;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  children,\n  style,\n  padding = 16,\n  margin = 0,\n}) => {\n  const { colors } = useTheme();\n\n  const styles = StyleSheet.create({\n    card: {\n      backgroundColor: colors.card,\n      borderRadius: 12,\n      padding,\n      margin,\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 2,\n      },\n      shadowOpacity: 0.1,\n      shadowRadius: 3.84,\n      elevation: 5,\n    },\n  });\n\n  return <View style={[styles.card, style]}>{children}</View>;\n};","size_bytes":768},"app.config.js":{"content":"export default {\n  expo: {\n    name: \"JAW Restaurant\",\n    slug: \"jaw-restaurant\",\n    version: \"1.0.0\",\n    orientation: \"portrait\",\n    icon: \"./assets/icon.png\",\n    userInterfaceStyle: \"automatic\",\n    splash: {\n      image: \"./assets/splash-icon.png\",\n      resizeMode: \"contain\",\n      backgroundColor: \"#ffffff\"\n    },\n    assetBundlePatterns: [\"**/*\"],\n    ios: {\n      supportsTablet: true,\n      bundleIdentifier: \"com.jaw.restaurant\"\n    },\n    android: {\n      adaptiveIcon: {\n        foregroundImage: \"./assets/adaptive-icon.png\",\n        backgroundColor: \"#ffffff\"\n      },\n      package: \"com.jaw.restaurant\"\n    },\n    web: {\n      favicon: \"./assets/favicon.png\",\n      bundler: \"metro\"\n    },\n    devClient: {\n      silentLaunch: true\n    },\n    plugins: [\n      \"expo-router\",\n      [\n        \"expo-notifications\",\n        {\n          icon: \"./assets/icon.png\",\n          color: \"#ffffff\"\n        }\n      ]\n    ]\n  }\n};","size_bytes":938},"src/components/Loader.tsx":{"content":"import React from 'react';\nimport { View, ActivityIndicator, StyleSheet, Text } from 'react-native';\nimport { useTheme } from '@/hooks/useTheme';\n\ninterface LoaderProps {\n  size?: 'small' | 'large';\n  text?: string;\n  fullScreen?: boolean;\n}\n\nexport const Loader: React.FC<LoaderProps> = ({\n  size = 'large',\n  text,\n  fullScreen = false,\n}) => {\n  const { colors } = useTheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 20,\n    },\n    fullScreen: {\n      ...StyleSheet.absoluteFillObject,\n      backgroundColor: colors.background,\n    },\n    text: {\n      marginTop: 16,\n      fontSize: 16,\n      color: colors.textSecondary,\n      textAlign: 'center',\n    },\n  });\n\n  return (\n    <View style={[styles.container, fullScreen && styles.fullScreen]}>\n      <ActivityIndicator size={size} color={colors.primary} />\n      {text && <Text style={styles.text}>{text}</Text>}\n    </View>\n  );\n};","size_bytes":977},"src/lib/storage.ts":{"content":"import { supabase } from './supabase';\n\nexport class StorageService {\n  static async uploadImage(file: any, bucket: string, path: string): Promise<string | null> {\n    try {\n      const { data, error } = await supabase.storage\n        .from(bucket)\n        .upload(path, file);\n\n      if (error) throw error;\n\n      const { data: { publicUrl } } = supabase.storage\n        .from(bucket)\n        .getPublicUrl(data.path);\n\n      return publicUrl;\n    } catch (error) {\n      console.error('Upload error:', error);\n      return null;\n    }\n  }\n\n  static async deleteImage(bucket: string, path: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.storage\n        .from(bucket)\n        .remove([path]);\n\n      return !error;\n    } catch (error) {\n      console.error('Delete error:', error);\n      return false;\n    }\n  }\n}","size_bytes":844},"src/lib/supabase.web.ts":{"content":"// Web-safe Supabase client that doesn't cause bundling issues\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn('⚠️  Supabase environment variables not configured. Please add EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY to your Replit secrets.');\n}\n\nexport const supabase = createClient(\n  supabaseUrl || 'https://placeholder.supabase.co',\n  supabaseAnonKey || 'placeholder-anon-key',\n  {\n    auth: {\n      // Use localStorage for web instead of AsyncStorage\n      storage: typeof window !== 'undefined' ? window.localStorage : undefined,\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: false,\n    },\n  }\n);","size_bytes":848},"src/store/authStore.ts":{"content":"import { create } from 'zustand';\r\nimport { User } from '@/types/models';\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  isLoading: boolean;\r\n  isAuthenticated: boolean;\r\n  userType: 'diner' | 'owner' | null;\r\n  setUser: (user: User | null) => void;\r\n  setLoading: (loading: boolean) => void;\r\n  logout: () => void;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>((set) => ({\r\n  user: null,\r\n  isLoading: true,\r\n  isAuthenticated: false,\r\n  userType: null,\r\n  setUser: (user) =>\r\n    set({\r\n      user,\r\n      isAuthenticated: !!user,\r\n      userType: user?.userType || null,\r\n    }),\r\n  setLoading: (isLoading) => set({ isLoading }),\r\n  logout: () =>\r\n    set({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      userType: null,\r\n    }),\r\n}));\r\n","size_bytes":759},"src/app/user/screens/HomeScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, Image, ViewStyle } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { SlidersHorizontal, MapPin, Home, Search, Heart, Calendar, User } from 'lucide-react-native';\n\nconst categories = [\n  { \n    id: 'cafe', \n    name: 'Cafe', \n    image: require('../../../../attached_assets/stock_images/coffee_cup_on_table__abd66cb7.jpg'),\n    position: { top: 50, left: '42%' },\n    hasGlow: true\n  },\n  { \n    id: 'morocco', \n    name: 'Morocco Way', \n    image: require('../../../../attached_assets/stock_images/moroccan_food_tagine_0769b13f.jpg'),\n    position: { top: 180, left: '12%' }\n  },\n  { \n    id: 'fine-dining', \n    name: 'Fine Dining', \n    image: require('../../../../attached_assets/stock_images/fine_dining_restaura_e3e81472.jpg'),\n    position: { top: 180, right: '12%' }\n  },\n  { \n    id: 'dance', \n    name: 'Dance', \n    image: require('../../../../attached_assets/stock_images/dancing_nightclub_pe_6f2cc80d.jpg'),\n    position: { bottom: 180, left: '12%' }\n  },\n  { \n    id: 'lounge', \n    name: 'Loung & Pub', \n    image: require('../../../../attached_assets/stock_images/pub_bar_interior_bot_d7aafd62.jpg'),\n    position: { bottom: 60, right: '12%' }\n  },\n  { \n    id: 'chiringuito', \n    name: 'Chiringuito', \n    image: require('../../../../attached_assets/stock_images/beach_bar_chiringuit_ca707799.jpg'),\n    position: { bottom: 60, left: '35%' }\n  },\n];\n\nexport const HomeScreen = () => {\n  const navigation = useNavigation<any>();\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  const handleCategorySelect = (categoryId: string) => {\n    setSelectedCategory(categoryId);\n    navigation.navigate('Discover', { category: categoryId });\n  };\n\n  return (\n    <View style={styles.container}>\n      <LinearGradient\n        colors={['#4A3168', '#3D2854', '#2D1F40']}\n        style={styles.gradient}\n      >\n        <View style={styles.header}>\n          <Text style={styles.logo}>שבת</Text>\n        </View>\n\n        <View style={styles.filterBar}>\n          <TouchableOpacity style={styles.filterButton}>\n            <SlidersHorizontal size={18} color=\"#fff\" />\n            <Text style={styles.filterText}>Filter Distance</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity style={styles.locationButton}>\n            <MapPin size={16} color=\"#fff\" />\n            <Text style={styles.locationText}>Tanger, Morocco</Text>\n          </TouchableOpacity>\n        </View>\n\n        <Text style={styles.title}>Choose Category</Text>\n\n        <View style={styles.categoriesContainer}>\n          <LinearGradient\n            colors={['rgba(138, 93, 255, 0.3)', 'rgba(138, 93, 255, 0.1)', 'transparent']}\n            style={styles.bottleDecoration}\n          />\n          \n          {categories.map((category) => (\n            <TouchableOpacity\n              key={category.id}\n              style={[\n                styles.categoryItem,\n                {\n                  position: 'absolute',\n                  ...category.position,\n                } as ViewStyle,\n                selectedCategory === category.id && styles.categorySelected,\n              ]}\n              onPress={() => handleCategorySelect(category.id)}\n            >\n              <View style={[\n                styles.categoryCircle,\n                category.hasGlow && styles.categoryGlow\n              ]}>\n                <Image \n                  source={category.image} \n                  style={styles.categoryImage}\n                  resizeMode=\"cover\"\n                />\n              </View>\n              <Text style={styles.categoryName}>{category.name}</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n\n        <View style={styles.bottomNav}>\n          <TouchableOpacity style={styles.navItem}>\n            <Home size={24} color=\"#fff\" fill=\"#fff\" />\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.navItem}>\n            <Search size={24} color=\"#fff\" />\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.navItem}>\n            <Heart size={24} color=\"#fff\" />\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.navItem}>\n            <Calendar size={24} color=\"#fff\" />\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.navItem}>\n            <User size={24} color=\"#fff\" />\n          </TouchableOpacity>\n        </View>\n      </LinearGradient>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1a1a2e',\n  },\n  gradient: {\n    flex: 1,\n  },\n  header: {\n    alignItems: 'center',\n    paddingTop: 50,\n    paddingBottom: 15,\n  },\n  logo: {\n    fontSize: 38,\n    fontWeight: 'bold',\n    color: '#fff',\n    letterSpacing: 3,\n  },\n  filterBar: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    marginBottom: 25,\n    alignItems: 'center',\n  },\n  filterButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(255, 255, 255, 0.12)',\n    paddingHorizontal: 14,\n    paddingVertical: 9,\n    borderRadius: 8,\n    gap: 7,\n  },\n  filterText: {\n    color: '#fff',\n    fontSize: 13,\n    fontWeight: '500',\n  },\n  locationButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 5,\n  },\n  locationText: {\n    color: '#fff',\n    fontSize: 13,\n    fontWeight: '400',\n  },\n  title: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: '#fff',\n    textAlign: 'center',\n    marginBottom: 35,\n  },\n  categoriesContainer: {\n    flex: 1,\n    position: 'relative',\n    marginHorizontal: 20,\n    marginBottom: 80,\n  },\n  bottleDecoration: {\n    position: 'absolute',\n    width: 65,\n    height: 320,\n    borderRadius: 32,\n    top: '18%',\n    left: '50%',\n    transform: [{ translateX: -32.5 }],\n  },\n  categoryItem: {\n    alignItems: 'center',\n  },\n  categoryCircle: {\n    width: 105,\n    height: 105,\n    borderRadius: 52.5,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 3,\n    borderColor: '#fff',\n    overflow: 'hidden',\n  },\n  categoryGlow: {\n    shadowColor: '#8B5DFF',\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0.9,\n    shadowRadius: 25,\n    elevation: 12,\n  },\n  categorySelected: {\n    transform: [{ scale: 1.08 }],\n  },\n  categoryImage: {\n    width: '100%',\n    height: '100%',\n  },\n  categoryName: {\n    marginTop: 10,\n    fontSize: 13,\n    fontWeight: '600',\n    color: '#fff',\n    textAlign: 'center',\n  },\n  bottomNav: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    paddingVertical: 15,\n    paddingBottom: 25,\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    borderTopWidth: 1,\n    borderTopColor: 'rgba(255, 255, 255, 0.1)',\n  },\n  navItem: {\n    padding: 8,\n  },\n});\n","size_bytes":7028},"src/features/auth/screens/VerifyEmailScreen.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n  StatusBar,\n  Image,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Mail, ArrowLeft } from 'lucide-react-native';\n\ninterface VerifyEmailScreenProps {\n  navigation?: any;\n  onVerify?: (code: string) => void;\n  onResendCode?: () => void;\n}\n\nexport const VerifyEmailScreen: React.FC<VerifyEmailScreenProps> = ({ \n  navigation, \n  onVerify,\n  onResendCode \n}) => {\n  const [code, setCode] = useState(['', '', '', '', '', '']);\n  const inputRefs = useRef<Array<TextInput | null>>([]);\n\n  const handleChangeText = (text: string, index: number) => {\n    const newCode = [...code];\n    newCode[index] = text;\n    setCode(newCode);\n\n    // Auto-focus next input\n    if (text && index < 5) {\n      inputRefs.current[index + 1]?.focus();\n    }\n  };\n\n  const handleKeyPress = (e: any, index: number) => {\n    if (e.nativeEvent.key === 'Backspace' && !code[index] && index > 0) {\n      inputRefs.current[index - 1]?.focus();\n    }\n  };\n\n  const handleContinue = () => {\n    const fullCode = code.join('');\n    console.log('Verifying code:', fullCode);\n    onVerify?.(fullCode);\n  };\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <View className=\"flex-1 px-6\">\n            {/* Back Button */}\n            <TouchableOpacity \n              onPress={() => navigation?.goBack()}\n              className=\"pt-3 pb-6\"\n            >\n              <ArrowLeft size={28} color=\"#FFFFFF\" />\n            </TouchableOpacity>\n\n            {/* JAW Logo */}\n            <View className=\"items-center mb-8\">\n              <Image\n                source={require('../../../../attached_assets/Profile Restaurent Booking_1760530725671.png')}\n                className=\"h-[50px]\"\n                resizeMode=\"contain\"\n                style={{ width: 120 }}\n              />\n            </View>\n\n            {/* Icon */}\n            <View className=\"items-center mb-6\">\n              <View className=\"w-24 h-24 bg-white/10 border border-white/20 rounded-3xl items-center justify-center\">\n                <Mail size={48} color=\"rgba(255, 255, 255, 0.8)\" />\n              </View>\n            </View>\n\n            {/* Title */}\n            <Text className=\"text-2xl font-bold text-white text-center mb-2\">\n              Verify Your Email to\n            </Text>\n\n            {/* Subtitle */}\n            <Text className=\"text-base text-white/70 text-center mb-8\">\n              Enter the 6 digit verification code\n            </Text>\n\n            {/* OTP Input Fields */}\n            <View className=\"flex-row justify-center mb-8\" style={{ gap: 12 }}>\n              {code.map((digit, index) => (\n                <TextInput\n                  key={index}\n                  ref={(ref) => {\n                    inputRefs.current[index] = ref;\n                  }}\n                  value={digit}\n                  onChangeText={(text) => handleChangeText(text, index)}\n                  onKeyPress={(e) => handleKeyPress(e, index)}\n                  maxLength={1}\n                  keyboardType=\"number-pad\"\n                  className=\"w-12 h-12 bg-black/40 border border-white/30 rounded-lg text-white text-center text-xl\"\n                  style={{ fontSize: 20 }}\n                />\n              ))}\n            </View>\n\n            {/* Continue Button */}\n            <TouchableOpacity\n              onPress={handleContinue}\n              className=\"bg-[#8B5DFF] rounded-xl py-4 mb-6\"\n            >\n              <Text className=\"text-white text-lg font-semibold text-center\">\n                Continue\n              </Text>\n            </TouchableOpacity>\n\n            {/* Resend Code */}\n            <View className=\"flex-row justify-center items-center\">\n              <Text className=\"text-white/60 text-sm\">Didn't you code receive any code ? </Text>\n              <TouchableOpacity onPress={onResendCode}>\n                <Text className=\"text-white text-sm font-semibold\">Resend Code</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":4473},"src/app/owner/screens/FeedScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView, Image, FlatList } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Bell, Heart, MessageCircle, Plus, Video, Image as ImageIcon, Pin } from 'lucide-react-native';\nimport { Restaurant } from '../../../types/models';\n\ninterface Chef {\n  id: string;\n  name: string;\n  avatar: string;\n}\n\ninterface Post {\n  id: string;\n  chef: Chef;\n  restaurant: Restaurant;\n  likes: number;\n  comments: number;\n  rating: number;\n}\n\nconst mockChefs: Chef[] = [\n  { id: '1', name: 'Mohamed', avatar: 'https://i.pravatar.cc/150?img=1' },\n  { id: '2', name: 'Janes', avatar: 'https://i.pravatar.cc/150?img=2' },\n  { id: '3', name: 'Moro', avatar: 'https://i.pravatar.cc/150?img=3' },\n  { id: '4', name: 'Khaoula', avatar: 'https://i.pravatar.cc/150?img=4' },\n  { id: '5', name: 'Mike', avatar: 'https://i.pravatar.cc/150?img=5' },\n];\n\nconst mockPosts: Post[] = [\n  {\n    id: '1',\n    chef: mockChefs[0],\n    restaurant: {\n      id: '1',\n      ownerId: '1',\n      name: 'Restaurant name',\n      description: '',\n      cuisineTypes: [],\n      address: '',\n      city: 'Sophie, Tanger',\n      phone: '',\n      email: '',\n      rating: 4.9,\n      reviewCount: 45,\n      priceRange: 3,\n      images: [],\n      coverImage: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300',\n      amenities: [],\n      businessHours: {},\n      isVerified: true,\n      createdAt: new Date().toISOString(),\n      location: { latitude: 0, longitude: 0 },\n    },\n    likes: 2000,\n    comments: 23,\n    rating: 4.9,\n  },\n];\n\nexport const FeedScreen = () => {\n  const navigation = useNavigation<any>();\n  const [showActions, setShowActions] = useState(false);\n\n  const renderChefItem = ({ item }: { item: Chef }) => (\n    <TouchableOpacity style={styles.chefItem}>\n      <Image source={{ uri: item.avatar }} style={styles.chefAvatar} />\n      <Text style={styles.chefName}>{item.name}</Text>\n    </TouchableOpacity>\n  );\n\n  const renderPost = ({ item }: { item: Post }) => (\n    <View style={styles.postCard}>\n      <Image source={{ uri: item.restaurant.coverImage }} style={styles.postImage} />\n      \n      <View style={styles.postContent}>\n        <Text style={styles.restaurantName}>{item.restaurant.name}</Text>\n        <Text style={styles.restaurantLocation}>{item.restaurant.city}</Text>\n        \n        <View style={styles.postStats}>\n          <View style={styles.statItem}>\n            <Heart size={18} color=\"#fff\" />\n            <Text style={styles.statText}>{item.likes >= 1000 ? `${item.likes / 1000}k` : item.likes}</Text>\n          </View>\n          \n          <View style={styles.statItem}>\n            <MessageCircle size={18} color=\"#fff\" />\n            <Text style={styles.statText}>{item.comments}</Text>\n          </View>\n          \n          <View style={styles.rating}>\n            <Text style={styles.ratingText}>⭐ {item.restaurant.rating}</Text>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity>\n          <Image\n            source={{ uri: 'https://i.pravatar.cc/100?img=10' }}\n            style={styles.profileAvatar}\n          />\n        </TouchableOpacity>\n        \n        <Text style={styles.logo}>שבת</Text>\n        \n        <TouchableOpacity style={styles.notificationButton}>\n          <Bell size={24} color=\"#fff\" />\n          <View style={styles.notificationBadge} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content}>\n        <Text style={styles.sectionTitle}>Best Chef</Text>\n        \n        <FlatList\n          horizontal\n          data={mockChefs}\n          keyExtractor={(item) => item.id}\n          renderItem={renderChefItem}\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={styles.chefsContainer}\n        />\n\n        <FlatList\n          data={mockPosts}\n          keyExtractor={(item) => item.id}\n          renderItem={renderPost}\n          scrollEnabled={false}\n        />\n      </ScrollView>\n\n      <TouchableOpacity\n        style={styles.addButton}\n        onPress={() => setShowActions(!showActions)}\n      >\n        <Plus size={28} color=\"#fff\" />\n      </TouchableOpacity>\n\n      {showActions && (\n        <View style={styles.actionsMenu}>\n          <TouchableOpacity style={styles.actionItem}>\n            <Video size={20} color=\"#fff\" />\n            <Text style={styles.actionText}>Start Live</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity style={styles.actionItem}>\n            <ImageIcon size={20} color=\"#fff\" />\n            <Text style={styles.actionText}>Add Story</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity style={[styles.actionItem, styles.actionItemPrimary]}>\n            <Pin size={20} color=\"#fff\" />\n            <Text style={styles.actionText}>Add PIN</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0a0a0f',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingTop: 60,\n    paddingBottom: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#1a1a2e',\n  },\n  profileAvatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    borderWidth: 2,\n    borderColor: '#8B5DFF',\n  },\n  logo: {\n    fontSize: 36,\n    fontWeight: 'bold',\n    color: '#fff',\n  },\n  notificationButton: {\n    position: 'relative',\n  },\n  notificationBadge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n    backgroundColor: '#FF3B30',\n  },\n  content: {\n    flex: 1,\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#fff',\n    paddingHorizontal: 20,\n    marginTop: 20,\n    marginBottom: 16,\n  },\n  chefsContainer: {\n    paddingHorizontal: 20,\n    paddingBottom: 24,\n  },\n  chefItem: {\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  chefAvatar: {\n    width: 70,\n    height: 70,\n    borderRadius: 35,\n    marginBottom: 8,\n    borderWidth: 2,\n    borderColor: '#8B5DFF',\n  },\n  chefName: {\n    color: '#fff',\n    fontSize: 12,\n  },\n  postCard: {\n    marginHorizontal: 20,\n    marginBottom: 24,\n    borderRadius: 16,\n    overflow: 'hidden',\n    backgroundColor: '#1a1a2e',\n  },\n  postImage: {\n    width: '100%',\n    height: 220,\n  },\n  postContent: {\n    padding: 16,\n  },\n  restaurantName: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 4,\n  },\n  restaurantLocation: {\n    fontSize: 14,\n    color: '#999',\n    marginBottom: 12,\n  },\n  postStats: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16,\n  },\n  statItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  statText: {\n    color: '#fff',\n    fontSize: 14,\n  },\n  rating: {\n    marginLeft: 'auto',\n    backgroundColor: '#8B5DFF',\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  ratingText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  addButton: {\n    position: 'absolute',\n    bottom: 90,\n    alignSelf: 'center',\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: '#8B5DFF',\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: '#8B5DFF',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.5,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n  actionsMenu: {\n    position: 'absolute',\n    bottom: 160,\n    alignSelf: 'center',\n    backgroundColor: '#1a1a2e',\n    borderRadius: 16,\n    padding: 8,\n    minWidth: 200,\n  },\n  actionItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    gap: 12,\n  },\n  actionItemPrimary: {\n    backgroundColor: '#2a2a3e',\n    borderRadius: 8,\n  },\n  actionText: {\n    color: '#fff',\n    fontSize: 16,\n  },\n});\n","size_bytes":8060},"src/app/user/screens/ReviewsScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView, TextInput, Image, FlatList } from 'react-native';\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport { Star, Send } from 'lucide-react-native';\nimport { Review } from '../../../types/models';\n\nconst mockReviews: Review[] = [\n  {\n    id: '1',\n    userId: '1',\n    restaurantId: '1',\n    rating: 2,\n    comment: 'Le lorem ipsum est, en imprimerie, une suite de mots sans signification utilisée à titre provisoire pour calibrer une mise en page 😍',\n    createdAt: '4d',\n    user: {\n      id: '1',\n      email: 'mohamed@example.com',\n      fullName: 'Mohamed Johnson',\n      userType: 'diner',\n      avatarUrl: 'https://i.pravatar.cc/100?img=1',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    },\n  },\n  {\n    id: '2',\n    userId: '2',\n    restaurantId: '1',\n    rating: 2,\n    comment: 'Le lorem ipsum est, en imprimerie, une suite de mots sans signification utilisée à titre provisoire pour calibrer une mise en page 😍',\n    createdAt: '1w',\n    user: {\n      id: '2',\n      email: 'user@example.com',\n      fullName: 'Mohamed Johnson',\n      userType: 'diner',\n      avatarUrl: 'https://i.pravatar.cc/100?img=2',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    },\n  },\n  {\n    id: '3',\n    userId: '3',\n    restaurantId: '1',\n    rating: 2,\n    comment: 'Le lorem ipsum est, en imprimerie, une suite de mots sans signification utilisée à titre provisoire pour calibrer une mise en page 😍',\n    createdAt: '1m',\n    user: {\n      id: '3',\n      email: 'user3@example.com',\n      fullName: 'Mohamed Johnson',\n      userType: 'diner',\n      avatarUrl: 'https://i.pravatar.cc/100?img=3',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    },\n  },\n];\n\nexport const ReviewsScreen = () => {\n  const route = useRoute<any>();\n  const navigation = useNavigation<any>();\n  const [rating, setRating] = useState(0);\n  const [reviewText, setReviewText] = useState('');\n\n  const renderStars = (currentRating: number, onPress?: (star: number) => void) => {\n    const stars = [];\n    \n    for (let i = 1; i <= 5; i++) {\n      stars.push(\n        <TouchableOpacity\n          key={i}\n          onPress={() => onPress?.(i)}\n          disabled={!onPress}\n        >\n          <Star\n            size={onPress ? 32 : 16}\n            color={i <= currentRating ? '#FFD700' : '#666'}\n            fill={i <= currentRating ? '#FFD700' : 'transparent'}\n          />\n        </TouchableOpacity>\n      );\n    }\n    \n    return stars;\n  };\n\n  const renderReview = ({ item }: { item: Review }) => (\n    <View style={styles.reviewItem}>\n      <Image source={{ uri: item.user?.avatarUrl }} style={styles.avatar} />\n      <View style={styles.reviewContent}>\n        <View style={styles.reviewHeader}>\n          <Text style={styles.userName}>{item.user?.fullName}</Text>\n          <Text style={styles.timeAgo}>{item.createdAt}</Text>\n        </View>\n        <Text style={styles.reviewText}>{item.comment}</Text>\n        <View style={styles.reviewRating}>\n          {renderStars(item.rating)}\n        </View>\n      </View>\n    </View>\n  );\n\n  const handleSubmitReview = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Reviews</Text>\n      </View>\n\n      <FlatList\n        data={mockReviews}\n        keyExtractor={(item) => item.id}\n        renderItem={renderReview}\n        ListHeaderComponent={null}\n        contentContainerStyle={styles.listContent}\n      />\n\n      <View style={styles.rateSection}>\n        <Text style={styles.rateTitle}>Rate your experience</Text>\n        <View style={styles.starsContainer}>\n          {renderStars(rating, setRating)}\n        </View>\n        \n        <View style={styles.inputContainer}>\n          <Image\n            source={{ uri: 'https://i.pravatar.cc/100?img=10' }}\n            style={styles.userAvatar}\n          />\n          <TextInput\n            style={styles.input}\n            placeholder=\"Share your thoughts...\"\n            placeholderTextColor=\"#666\"\n            value={reviewText}\n            onChangeText={setReviewText}\n            multiline\n          />\n          <TouchableOpacity\n            style={styles.sendButton}\n            onPress={handleSubmitReview}\n          >\n            <Send size={20} color=\"#fff\" />\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0a0a0f',\n  },\n  header: {\n    paddingHorizontal: 20,\n    paddingTop: 60,\n    paddingBottom: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#1a1a2e',\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#fff',\n    textAlign: 'center',\n  },\n  listContent: {\n    paddingBottom: 300,\n  },\n  reviewItem: {\n    flexDirection: 'row',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#1a1a2e',\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    marginRight: 12,\n  },\n  reviewContent: {\n    flex: 1,\n  },\n  reviewHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  userName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#fff',\n  },\n  timeAgo: {\n    fontSize: 14,\n    color: '#666',\n  },\n  reviewText: {\n    fontSize: 14,\n    color: '#999',\n    lineHeight: 20,\n    marginBottom: 8,\n  },\n  reviewRating: {\n    flexDirection: 'row',\n    gap: 4,\n  },\n  rateSection: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: '#1a1a2e',\n    borderTopLeftRadius: 24,\n    borderTopRightRadius: 24,\n    padding: 20,\n    paddingBottom: 40,\n  },\n  rateTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#fff',\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  starsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    gap: 8,\n    marginBottom: 20,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#2a2a3e',\n    borderRadius: 24,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    gap: 12,\n  },\n  userAvatar: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n  },\n  input: {\n    flex: 1,\n    color: '#fff',\n    fontSize: 16,\n    maxHeight: 80,\n  },\n  sendButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: '#8B5DFF',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n","size_bytes":6620},"src/app/user/screens/VenueDetailsScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView, Image, FlatList } from 'react-native';\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport { Star, MapPin, Phone, Globe, Share2 } from 'lucide-react-native';\nimport { Restaurant } from '../../../types/models';\n\ninterface MenuItem {\n  id: string;\n  name: string;\n  prepTime: number;\n  rating: number;\n  price: number;\n  image: string;\n}\n\nconst mockMenuItems: MenuItem[] = [\n  {\n    id: '1',\n    name: 'Grilles Ocopus',\n    prepTime: 30,\n    rating: 4.7,\n    price: 25,\n    image: 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=200&h=150',\n  },\n  {\n    id: '2',\n    name: 'Grilles Ocopus',\n    prepTime: 30,\n    rating: 4.7,\n    price: 25,\n    image: 'https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=200&h=150',\n  },\n  {\n    id: '3',\n    name: 'Grilles Ocopus',\n    prepTime: 30,\n    rating: 4.7,\n    price: 25,\n    image: 'https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?w=200&h=150',\n  },\n  {\n    id: '4',\n    name: 'Grilles Ocopus',\n    prepTime: 30,\n    rating: 4.7,\n    price: 25,\n    image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ae38?w=200&h=150',\n  },\n];\n\nconst venueImages = [\n  'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=300&h=200',\n  'https://images.unsplash.com/photo-1552566626-52f8b828add9?w=300&h=200',\n  'https://images.unsplash.com/photo-1514933651103-005eec06c04b?w=300&h=200',\n];\n\nexport const VenueDetailsScreen = () => {\n  const route = useRoute<any>();\n  const navigation = useNavigation<any>();\n  const restaurant: Restaurant = route.params?.restaurant;\n  const [activeTab, setActiveTab] = useState<'overview' | 'menu' | 'bookings'>('overview');\n  const [isFavorite, setIsFavorite] = useState(false);\n\n  const renderMenuItem = ({ item }: { item: MenuItem }) => (\n    <View style={styles.menuItem}>\n      <Image source={{ uri: item.image }} style={styles.menuImage} />\n      <View style={styles.menuInfo}>\n        <Text style={styles.menuName}>{item.name}</Text>\n        <View style={styles.menuMeta}>\n          <Text style={styles.menuTime}>⏱ {item.prepTime} min</Text>\n          <Text style={styles.menuRating}>⭐ {item.rating}</Text>\n        </View>\n        <Text style={styles.menuPrice}>${item.price}</Text>\n      </View>\n    </View>\n  );\n\n  const openBookingModal = () => {\n    navigation.navigate('Booking', { restaurant });\n  };\n\n  return (\n    <View style={styles.container}>\n      <ScrollView>\n        <View style={styles.imageContainer}>\n          <Image\n            source={{ uri: restaurant?.coverImage || 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=600&h=400' }}\n            style={styles.coverImage}\n          />\n          <TouchableOpacity style={styles.shareButton}>\n            <Share2 size={20} color=\"#fff\" />\n            <Text style={styles.shareText}>Share</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.infoSection}>\n          <View style={styles.infoHeader}>\n            <Image\n              source={{ uri: restaurant?.coverImage }}\n              style={styles.logo}\n            />\n            <View style={styles.headerText}>\n              <Text style={styles.restaurantName}>{restaurant?.name || 'Elfa Bistro'}</Text>\n              <Text style={styles.restaurantType}>Restaurant</Text>\n              <View style={styles.ratingRow}>\n                <Star size={16} color=\"#FFD700\" fill=\"#FFD700\" />\n                <Star size={16} color=\"#FFD700\" fill=\"#FFD700\" />\n                <Star size={16} color=\"#666\" />\n                <Star size={16} color=\"#666\" />\n                <Star size={16} color=\"#666\" />\n                <Text style={styles.ratingText}>{restaurant?.rating || '3.5'} ({restaurant?.reviewCount || 2})</Text>\n              </View>\n            </View>\n          </View>\n\n          <Text style={styles.address}>123 Gourmet Street,</Text>\n          <Text style={styles.city}>Wazmize City</Text>\n\n          <Text style={styles.aboutTitle}>About</Text>\n          <Text style={styles.aboutText}>\n            {restaurant?.description || 'Modern fusion cuisine with local ingredients'}\n          </Text>\n\n          <View style={styles.actionButtons}>\n            <TouchableOpacity\n              style={styles.favoriteButton}\n              onPress={() => setIsFavorite(!isFavorite)}\n            >\n              <Text style={styles.favoriteButtonText}>Favorite</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.bookButton} onPress={openBookingModal}>\n              <Text style={styles.bookButtonText}>Book Now</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        <View style={styles.tabs}>\n          <TouchableOpacity\n            style={[styles.tab, activeTab === 'overview' && styles.tabActive]}\n            onPress={() => setActiveTab('overview')}\n          >\n            <Text style={[styles.tabText, activeTab === 'overview' && styles.tabTextActive]}>\n              Overview\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.tab, activeTab === 'menu' && styles.tabActive]}\n            onPress={() => setActiveTab('menu')}\n          >\n            <Text style={[styles.tabText, activeTab === 'menu' && styles.tabTextActive]}>\n              Menu\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.tab, activeTab === 'bookings' && styles.tabActive]}\n            onPress={() => setActiveTab('bookings')}\n          >\n            <Text style={[styles.tabText, activeTab === 'bookings' && styles.tabTextActive]}>\n              Bookings\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        {activeTab === 'overview' && (\n          <View style={styles.overviewContent}>\n            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.galleryScroll}>\n              {venueImages.map((img, index) => (\n                <Image key={index} source={{ uri: img }} style={styles.galleryImage} />\n              ))}\n            </ScrollView>\n\n            <Text style={styles.sectionTitle}>Location</Text>\n            <View style={styles.mapPlaceholder}>\n              <Text style={styles.mapText}>Map View</Text>\n            </View>\n\n            <Text style={styles.sectionTitle}>Cuisine</Text>\n            <View style={styles.cuisineContainer}>\n              <View style={styles.cuisineTag}>\n                <Text style={styles.cuisineText}>Moroccan</Text>\n              </View>\n              <View style={styles.cuisineTag}>\n                <Text style={styles.cuisineText}>Western</Text>\n              </View>\n              <View style={styles.cuisineTag}>\n                <Text style={styles.cuisineText}>Indonesian</Text>\n              </View>\n            </View>\n\n            <Text style={styles.sectionTitle}>Contact</Text>\n            <TouchableOpacity style={styles.contactItem}>\n              <Phone size={20} color=\"#8B5DFF\" />\n              <Text style={styles.contactText}>+212 6123456</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.contactItem}>\n              <Globe size={20} color=\"#8B5DFF\" />\n              <Text style={styles.contactText}>Visit Website</Text>\n            </TouchableOpacity>\n            <View style={styles.contactItem}>\n              <MapPin size={20} color=\"#8B5DFF\" />\n              <Text style={styles.contactText}>123 Gourmet Street</Text>\n            </View>\n          </View>\n        )}\n\n        {activeTab === 'menu' && (\n          <View style={styles.menuContent}>\n            <FlatList\n              data={mockMenuItems}\n              keyExtractor={(item) => item.id}\n              renderItem={renderMenuItem}\n              numColumns={2}\n              scrollEnabled={false}\n              columnWrapperStyle={styles.menuRow}\n            />\n          </View>\n        )}\n\n        {activeTab === 'bookings' && (\n          <View style={styles.bookingsContent}>\n            <Text style={styles.emptyText}>No bookings yet</Text>\n          </View>\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0a0a0f',\n  },\n  imageContainer: {\n    position: 'relative',\n  },\n  coverImage: {\n    width: '100%',\n    height: 300,\n  },\n  shareButton: {\n    position: 'absolute',\n    top: 60,\n    right: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(139, 93, 255, 0.8)',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    gap: 6,\n  },\n  shareText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  infoSection: {\n    padding: 20,\n  },\n  infoHeader: {\n    flexDirection: 'row',\n    marginBottom: 16,\n  },\n  logo: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    marginRight: 16,\n  },\n  headerText: {\n    flex: 1,\n  },\n  restaurantName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 4,\n  },\n  restaurantType: {\n    fontSize: 14,\n    color: '#999',\n    marginBottom: 8,\n  },\n  ratingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 2,\n  },\n  ratingText: {\n    color: '#fff',\n    fontSize: 14,\n    marginLeft: 8,\n  },\n  address: {\n    fontSize: 14,\n    color: '#999',\n  },\n  city: {\n    fontSize: 14,\n    color: '#999',\n    marginBottom: 16,\n  },\n  aboutTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 8,\n  },\n  aboutText: {\n    fontSize: 14,\n    color: '#999',\n    lineHeight: 20,\n    marginBottom: 20,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  favoriteButton: {\n    flex: 1,\n    paddingVertical: 14,\n    borderRadius: 12,\n    backgroundColor: '#2a2a3e',\n    alignItems: 'center',\n  },\n  favoriteButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  bookButton: {\n    flex: 1,\n    paddingVertical: 14,\n    borderRadius: 12,\n    backgroundColor: '#8B5DFF',\n    alignItems: 'center',\n  },\n  bookButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  tabs: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    borderBottomColor: '#1a1a2e',\n    paddingHorizontal: 20,\n  },\n  tab: {\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    marginRight: 8,\n  },\n  tabActive: {\n    borderBottomWidth: 2,\n    borderBottomColor: '#8B5DFF',\n  },\n  tabText: {\n    color: '#666',\n    fontSize: 16,\n  },\n  tabTextActive: {\n    color: '#8B5DFF',\n    fontWeight: '600',\n  },\n  overviewContent: {\n    padding: 20,\n  },\n  galleryScroll: {\n    marginBottom: 24,\n  },\n  galleryImage: {\n    width: 150,\n    height: 100,\n    borderRadius: 12,\n    marginRight: 12,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 12,\n  },\n  mapPlaceholder: {\n    height: 150,\n    backgroundColor: '#1a1a2e',\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  mapText: {\n    color: '#666',\n  },\n  cuisineContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n    marginBottom: 24,\n  },\n  cuisineTag: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    backgroundColor: '#8B5DFF',\n  },\n  cuisineText: {\n    color: '#fff',\n    fontSize: 14,\n  },\n  contactItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    paddingVertical: 12,\n  },\n  contactText: {\n    color: '#fff',\n    fontSize: 16,\n  },\n  menuContent: {\n    padding: 12,\n  },\n  menuRow: {\n    justifyContent: 'space-between',\n    paddingHorizontal: 8,\n  },\n  menuItem: {\n    width: '48%',\n    marginBottom: 16,\n    borderRadius: 12,\n    overflow: 'hidden',\n    backgroundColor: '#1a1a2e',\n  },\n  menuImage: {\n    width: '100%',\n    height: 120,\n  },\n  menuInfo: {\n    padding: 12,\n  },\n  menuName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#fff',\n    marginBottom: 6,\n  },\n  menuMeta: {\n    flexDirection: 'row',\n    gap: 8,\n    marginBottom: 6,\n  },\n  menuTime: {\n    fontSize: 12,\n    color: '#999',\n  },\n  menuRating: {\n    fontSize: 12,\n    color: '#999',\n  },\n  menuPrice: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#8B5DFF',\n  },\n  bookingsContent: {\n    padding: 40,\n    alignItems: 'center',\n  },\n  emptyText: {\n    color: '#666',\n    fontSize: 16,\n  },\n});\n","size_bytes":12414},"src/features/auth/screens/ForgotPasswordScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n  StatusBar,\n  Image,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Mail, KeyRound, ArrowLeft } from 'lucide-react-native';\n\ninterface ForgotPasswordScreenProps {\n  navigation?: any;\n  onSubmit?: (email: string) => void;\n  onBackToSignIn?: () => void;\n}\n\nexport const ForgotPasswordScreen: React.FC<ForgotPasswordScreenProps> = ({ \n  navigation, \n  onSubmit,\n  onBackToSignIn \n}) => {\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = () => {\n    console.log('Submitting forgot password request...');\n    onSubmit?.(email);\n  };\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <View className=\"flex-1 px-6\">\n            {/* Back Button */}\n            <TouchableOpacity \n              onPress={onBackToSignIn || (() => navigation?.goBack())}\n              className=\"pt-3 pb-6\"\n            >\n              <ArrowLeft size={28} color=\"#FFFFFF\" />\n            </TouchableOpacity>\n\n            {/* JAW Logo */}\n            <View className=\"items-center mb-8\">\n              <Image\n                source={require('../../../../attached_assets/Profile Restaurent Booking_1760530725671.png')}\n                className=\"h-[50px]\"\n                resizeMode=\"contain\"\n                style={{ width: 120 }}\n              />\n            </View>\n\n            {/* Icon */}\n            <View className=\"items-center mb-6\">\n              <View className=\"w-24 h-24 bg-white/10 border border-white/20 rounded-3xl items-center justify-center\">\n                <KeyRound size={48} color=\"rgba(255, 255, 255, 0.8)\" />\n              </View>\n            </View>\n\n            {/* Title */}\n            <Text className=\"text-2xl font-bold text-white text-center mb-4\">\n              Forgot Your Password{'\\n'}and Continue\n            </Text>\n\n            {/* Email Field */}\n            <Text className=\"text-white text-sm mb-3\">Email</Text>\n            <View className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 mb-6 flex-row items-center\">\n              <Mail size={20} color=\"rgba(255, 255, 255, 0.4)\" style={{ marginRight: 12 }} />\n              <TextInput\n                value={email}\n                onChangeText={setEmail}\n                placeholder=\"eg.johnfran@gmail.com\"\n                placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                className=\"flex-1 text-white\"\n                style={{ fontSize: 15 }}\n              />\n            </View>\n\n            {/* Submit Button */}\n            <TouchableOpacity\n              onPress={handleSubmit}\n              className=\"bg-[#8B5DFF] rounded-xl py-4 mb-4\"\n            >\n              <Text className=\"text-white text-lg font-semibold text-center\">\n                Submit Now\n              </Text>\n            </TouchableOpacity>\n\n            {/* Back to Sign In Button */}\n            <TouchableOpacity\n              onPress={onBackToSignIn || (() => navigation?.goBack())}\n              className=\"bg-white/10 border border-white/20 rounded-xl py-4 flex-row items-center justify-center\"\n            >\n              <ArrowLeft size={20} color=\"#FFFFFF\" style={{ marginRight: 8 }} />\n              <Text className=\"text-white text-base text-center\">\n                back to Sign In\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":3859},"src/app/user/components/RestaurantCard.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, Image } from 'react-native';\nimport { Heart, Star } from 'lucide-react-native';\nimport { Restaurant } from '../../../types/models';\n\ninterface RestaurantCardProps {\n  restaurant: Restaurant;\n  onPress: () => void;\n  onFavoritePress: () => void;\n  isFavorite?: boolean;\n}\n\nexport const RestaurantCard = ({ \n  restaurant, \n  onPress, \n  onFavoritePress,\n  isFavorite = false \n}: RestaurantCardProps) => {\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    \n    for (let i = 0; i < 5; i++) {\n      stars.push(\n        <Star\n          key={i}\n          size={16}\n          color={i < fullStars ? '#FFD700' : '#666'}\n          fill={i < fullStars ? '#FFD700' : 'transparent'}\n        />\n      );\n    }\n    \n    return stars;\n  };\n\n  return (\n    <TouchableOpacity style={styles.card} onPress={onPress}>\n      <Image\n        source={{ uri: restaurant.coverImage || 'https://via.placeholder.com/400x200' }}\n        style={styles.image}\n        resizeMode=\"cover\"\n      />\n      \n      <View style={styles.content}>\n        <Text style={styles.name}>{restaurant.name}</Text>\n        <Text style={styles.location}>{restaurant.city}</Text>\n        \n        <View style={styles.ratingContainer}>\n          <View style={styles.stars}>\n            {renderStars(restaurant.rating)}\n          </View>\n        </View>\n      </View>\n\n      <TouchableOpacity \n        style={styles.favoriteButton}\n        onPress={onFavoritePress}\n      >\n        <Heart\n          size={24}\n          color={isFavorite ? '#8B5DFF' : '#fff'}\n          fill={isFavorite ? '#8B5DFF' : 'transparent'}\n        />\n      </TouchableOpacity>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    marginHorizontal: 16,\n    marginBottom: 20,\n    borderRadius: 16,\n    overflow: 'hidden',\n    backgroundColor: '#1a1a2e',\n  },\n  image: {\n    width: '100%',\n    height: 200,\n  },\n  content: {\n    padding: 16,\n  },\n  name: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 4,\n  },\n  location: {\n    fontSize: 14,\n    color: '#999',\n    marginBottom: 8,\n  },\n  ratingContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  stars: {\n    flexDirection: 'row',\n    backgroundColor: 'rgba(139, 93, 255, 0.3)',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 20,\n    gap: 4,\n  },\n  favoriteButton: {\n    position: 'absolute',\n    top: 160,\n    right: 16,\n    width: 44,\n    height: 44,\n    borderRadius: 22,\n    backgroundColor: 'rgba(139, 93, 255, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n","size_bytes":2703},"src/features/auth/screens/SignUpScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n  StatusBar,\n  Image,\n  ScrollView,\n  Platform,\n  KeyboardAvoidingView,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Lock, Eye, EyeOff } from 'lucide-react-native';\n\ninterface SignUpScreenProps {\n  navigation?: any;\n  onSignIn?: () => void;\n}\n\nexport const SignUpScreen: React.FC<SignUpScreenProps> = ({ navigation, onSignIn }) => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleSignUp = () => {\n    console.log('Signing up...');\n  };\n\n  const handleGoogleSignUp = () => {\n    console.log('Google Sign Up');\n  };\n\n  const handleFacebookSignUp = () => {\n    console.log('Facebook Sign Up');\n  };\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <KeyboardAvoidingView \n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            className=\"flex-1\"\n          >\n            <ScrollView \n              className=\"flex-1\"\n              showsVerticalScrollIndicator={false}\n              keyboardShouldPersistTaps=\"handled\"\n            >\n              <View className=\"flex-1 px-6 pt-12\">\n                {/* JAW Logo */}\n                <View className=\"items-center mb-6\">\n                  <Image\n                    source={require('../../../../attached_assets/Profile Restaurent Booking_1760530725671.png')}\n                    className=\"h-[50px]\"\n                    resizeMode=\"contain\"\n                    style={{ width: 120 }}\n                  />\n                </View>\n\n                {/* Title */}\n                <Text className=\"text-3xl font-bold text-white text-center mb-2\">\n                  Sign Up Account\n                </Text>\n\n                {/* Subtitle */}\n                <Text className=\"text-sm text-white/70 text-center mb-6\">\n                  Enter your personal data to create your account.\n                </Text>\n\n                {/* Social Login Buttons */}\n                <View className=\"flex-row mb-6\" style={{ gap: 12 }}>\n                  <TouchableOpacity \n                    onPress={handleGoogleSignUp}\n                    className=\"flex-1 bg-white/10 border border-white/20 rounded-xl py-3 flex-row items-center justify-center\"\n                    style={{ gap: 8 }}\n                  >\n                    <Text className=\"text-white text-base\">Google</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity \n                    onPress={handleFacebookSignUp}\n                    className=\"flex-1 bg-white/10 border border-white/20 rounded-xl py-3 flex-row items-center justify-center\"\n                    style={{ gap: 8 }}\n                  >\n                    <Text className=\"text-white text-base\">Facebook</Text>\n                  </TouchableOpacity>\n                </View>\n\n                {/* Divider */}\n                <View className=\"flex-row items-center mb-6\">\n                  <View className=\"flex-1 h-[1px] bg-white/20\" />\n                  <Text className=\"text-white/50 px-4\">Or</Text>\n                  <View className=\"flex-1 h-[1px] bg-white/20\" />\n                </View>\n\n                {/* First Name & Last Name */}\n                <View className=\"flex-row mb-4\" style={{ gap: 12 }}>\n                  <View className=\"flex-1\">\n                    <Text className=\"text-white text-sm mb-2\">First Name</Text>\n                    <TextInput\n                      value={firstName}\n                      onChangeText={setFirstName}\n                      placeholder=\"eg.John\"\n                      placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                      className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white\"\n                      style={{ fontSize: 15 }}\n                    />\n                  </View>\n                  <View className=\"flex-1\">\n                    <Text className=\"text-white text-sm mb-2\">Last Name</Text>\n                    <TextInput\n                      value={lastName}\n                      onChangeText={setLastName}\n                      placeholder=\"eg.Francisco\"\n                      placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                      className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white\"\n                      style={{ fontSize: 15 }}\n                    />\n                  </View>\n                </View>\n\n                {/* Email Field */}\n                <Text className=\"text-white text-sm mb-2\">Email</Text>\n                <TextInput\n                  value={email}\n                  onChangeText={setEmail}\n                  placeholder=\"eg.johnfran@gmail.com\"\n                  placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                  className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 mb-4 text-white\"\n                  style={{ fontSize: 15 }}\n                />\n\n                {/* Password Field */}\n                <Text className=\"text-white text-sm mb-2\">Password</Text>\n                <View className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 mb-2 flex-row items-center\">\n                  <Lock size={20} color=\"rgba(255, 255, 255, 0.4)\" style={{ marginRight: 12 }} />\n                  <TextInput\n                    value={password}\n                    onChangeText={setPassword}\n                    placeholder=\"Enter your password\"\n                    placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                    secureTextEntry={!showPassword}\n                    className=\"flex-1 text-white\"\n                    style={{ fontSize: 15 }}\n                  />\n                  <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>\n                    {showPassword ? (\n                      <Eye size={20} color=\"rgba(255, 255, 255, 0.4)\" />\n                    ) : (\n                      <EyeOff size={20} color=\"rgba(255, 255, 255, 0.4)\" />\n                    )}\n                  </TouchableOpacity>\n                </View>\n\n                {/* Password Requirements */}\n                <Text className=\"text-white/50 text-xs mb-8\">\n                  Must be at least 8 characters\n                </Text>\n\n                {/* Sign Up Button */}\n                <TouchableOpacity\n                  onPress={handleSignUp}\n                  className=\"bg-[#8B5DFF] rounded-xl py-4 mb-8\"\n                >\n                  <Text className=\"text-white text-lg font-semibold text-center\">\n                    Sign Up\n                  </Text>\n                </TouchableOpacity>\n\n                {/* Sign In Link */}\n                <View className=\"flex-row justify-center items-center mb-6\">\n                  <Text className=\"text-white/60 text-sm\">Already have an account ? </Text>\n                  <TouchableOpacity onPress={onSignIn}>\n                    <Text className=\"text-white text-sm font-semibold\">Sign In</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            </ScrollView>\n          </KeyboardAvoidingView>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":7736},"src/features/auth/screens/SignInScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n  StatusBar,\n  Image,\n  ScrollView,\n  Platform,\n  KeyboardAvoidingView,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Mail, Lock, Eye, EyeOff } from 'lucide-react-native';\n\ninterface SignInScreenProps {\n  navigation?: any;\n  onForgotPassword?: () => void;\n  onSignUp?: () => void;\n}\n\nexport const SignInScreen: React.FC<SignInScreenProps> = ({ navigation, onForgotPassword, onSignUp }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n\n  const handleSignIn = () => {\n    console.log('Signing in...');\n  };\n\n  const handleGoogleSignIn = () => {\n    console.log('Google Sign In');\n  };\n\n  const handleFacebookSignIn = () => {\n    console.log('Facebook Sign In');\n  };\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <KeyboardAvoidingView \n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            className=\"flex-1\"\n          >\n            <ScrollView \n              className=\"flex-1\"\n              showsVerticalScrollIndicator={false}\n              keyboardShouldPersistTaps=\"handled\"\n            >\n              <View className=\"flex-1 px-6 pt-12\">\n                {/* JAW Logo */}\n                <View className=\"items-center mb-8\">\n                  <Image\n                    source={require('../../../../attached_assets/Profile Restaurent Booking_1760530725671.png')}\n                    className=\"h-[50px]\"\n                    resizeMode=\"contain\"\n                    style={{ width: 120 }}\n                  />\n                </View>\n\n                {/* Title */}\n                <Text className=\"text-3xl font-bold text-white text-center mb-2\">\n                  Sign In\n                </Text>\n\n                {/* Subtitle */}\n                <Text className=\"text-base text-white/70 text-center mb-8\">\n                  Sign in to continue\n                </Text>\n\n                {/* Social Login Buttons */}\n                <View className=\"flex-row mb-6\" style={{ gap: 12 }}>\n                  <TouchableOpacity \n                    onPress={handleGoogleSignIn}\n                    className=\"flex-1 bg-white/10 border border-white/20 rounded-xl py-3 flex-row items-center justify-center\"\n                    style={{ gap: 8 }}\n                  >\n                    <Text className=\"text-white text-base\">Google</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity \n                    onPress={handleFacebookSignIn}\n                    className=\"flex-1 bg-white/10 border border-white/20 rounded-xl py-3 flex-row items-center justify-center\"\n                    style={{ gap: 8 }}\n                  >\n                    <Text className=\"text-white text-base\">Facebook</Text>\n                  </TouchableOpacity>\n                </View>\n\n                {/* Divider */}\n                <View className=\"flex-row items-center mb-6\">\n                  <View className=\"flex-1 h-[1px] bg-white/20\" />\n                  <Text className=\"text-white/50 px-4\">Or</Text>\n                  <View className=\"flex-1 h-[1px] bg-white/20\" />\n                </View>\n\n                {/* Email Field */}\n                <Text className=\"text-white text-sm mb-2\">Email</Text>\n                <View className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 mb-4 flex-row items-center\">\n                  <Mail size={20} color=\"rgba(255, 255, 255, 0.4)\" style={{ marginRight: 12 }} />\n                  <TextInput\n                    value={email}\n                    onChangeText={setEmail}\n                    placeholder=\"eg.johnfran@gmail.com\"\n                    placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                    keyboardType=\"email-address\"\n                    autoCapitalize=\"none\"\n                    className=\"flex-1 text-white\"\n                    style={{ fontSize: 15 }}\n                  />\n                </View>\n\n                {/* Password Field */}\n                <Text className=\"text-white text-sm mb-2\">Password</Text>\n                <View className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 mb-2 flex-row items-center\">\n                  <Lock size={20} color=\"rgba(255, 255, 255, 0.4)\" style={{ marginRight: 12 }} />\n                  <TextInput\n                    value={password}\n                    onChangeText={setPassword}\n                    placeholder=\"Enter your password\"\n                    placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                    secureTextEntry={!showPassword}\n                    className=\"flex-1 text-white\"\n                    style={{ fontSize: 15 }}\n                  />\n                  <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>\n                    {showPassword ? (\n                      <Eye size={20} color=\"rgba(255, 255, 255, 0.4)\" />\n                    ) : (\n                      <EyeOff size={20} color=\"rgba(255, 255, 255, 0.4)\" />\n                    )}\n                  </TouchableOpacity>\n                </View>\n\n                {/* Password Requirements */}\n                <Text className=\"text-white/50 text-xs mb-4\">\n                  Must be at least 8 characters\n                </Text>\n\n                {/* Remember Me & Forgot Password */}\n                <View className=\"flex-row items-center justify-between mb-8\">\n                  <TouchableOpacity \n                    onPress={() => setRememberMe(!rememberMe)}\n                    className=\"flex-row items-center\"\n                  >\n                    <View className={`w-5 h-5 border border-white/40 rounded mr-2 ${rememberMe ? 'bg-white/20' : ''}`} />\n                    <Text className=\"text-white/70 text-sm\">Remember me</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity onPress={onForgotPassword}>\n                    <Text className=\"text-white text-sm\">Forget Password?</Text>\n                  </TouchableOpacity>\n                </View>\n\n                {/* Sign Up Button */}\n                <TouchableOpacity\n                  onPress={handleSignIn}\n                  className=\"bg-[#8B5DFF] rounded-xl py-4 mb-8\"\n                >\n                  <Text className=\"text-white text-lg font-semibold text-center\">\n                    Sign Up\n                  </Text>\n                </TouchableOpacity>\n\n                {/* Sign Up Link */}\n                <View className=\"flex-row justify-center items-center mb-6\">\n                  <Text className=\"text-white/60 text-sm\">Don't have an account ? </Text>\n                  <TouchableOpacity onPress={onSignUp}>\n                    <Text className=\"text-white text-sm font-semibold\">Sign Up</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            </ScrollView>\n          </KeyboardAvoidingView>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":7417},"src/features/auth/screens/EnterNewPasswordScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n  StatusBar,\n  Image,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Lock, Eye, EyeOff, ArrowLeft } from 'lucide-react-native';\n\ninterface EnterNewPasswordScreenProps {\n  navigation?: any;\n  onContinue?: (newPassword: string, confirmPassword: string) => void;\n  onCancel?: () => void;\n}\n\nexport const EnterNewPasswordScreen: React.FC<EnterNewPasswordScreenProps> = ({ \n  navigation,\n  onContinue,\n  onCancel \n}) => {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleContinue = () => {\n    console.log('Setting new password...');\n    onContinue?.(newPassword, confirmPassword);\n  };\n\n  return (\n    <View className=\"flex-1\">\n      <StatusBar barStyle=\"light-content\" backgroundColor=\"transparent\" translucent />\n      \n      <LinearGradient\n        colors={['rgba(69, 48, 99, 0.86)', '#000000']}\n        className=\"flex-1\"\n        start={{ x: 0, y: 0 }}\n        end={{ x: 0, y: 1 }}\n      >\n        <SafeAreaView className=\"flex-1\">\n          <View className=\"flex-1 px-6\">\n            {/* Back Button */}\n            <TouchableOpacity \n              onPress={() => navigation?.goBack()}\n              className=\"pt-3 pb-6\"\n            >\n              <ArrowLeft size={28} color=\"#FFFFFF\" />\n            </TouchableOpacity>\n\n            {/* JAW Logo */}\n            <View className=\"items-center mb-8\">\n              <Image\n                source={require('../../../../attached_assets/Profile Restaurent Booking_1760530725671.png')}\n                className=\"h-[50px]\"\n                resizeMode=\"contain\"\n                style={{ width: 120 }}\n              />\n            </View>\n\n            {/* Icon */}\n            <View className=\"items-center mb-6\">\n              <View className=\"w-24 h-24 bg-white/10 border border-white/20 rounded-3xl items-center justify-center\">\n                <Lock size={48} color=\"rgba(255, 255, 255, 0.8)\" />\n              </View>\n            </View>\n\n            {/* Title */}\n            <Text className=\"text-2xl font-bold text-white text-center mb-8\">\n              Enter Your New Password\n            </Text>\n\n            {/* New Password Field */}\n            <Text className=\"text-white/70 text-sm mb-3\">New Password</Text>\n            <View className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 mb-4 flex-row items-center\">\n              <Lock size={20} color=\"rgba(255, 255, 255, 0.4)\" style={{ marginRight: 12 }} />\n              <TextInput\n                value={newPassword}\n                onChangeText={setNewPassword}\n                placeholder=\"Enter your new password\"\n                placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                secureTextEntry={!showNewPassword}\n                className=\"flex-1 text-white\"\n                style={{ fontSize: 15 }}\n              />\n              <TouchableOpacity onPress={() => setShowNewPassword(!showNewPassword)}>\n                {showNewPassword ? (\n                  <Eye size={20} color=\"rgba(255, 255, 255, 0.4)\" />\n                ) : (\n                  <EyeOff size={20} color=\"rgba(255, 255, 255, 0.4)\" />\n                )}\n              </TouchableOpacity>\n            </View>\n\n            {/* Confirm Password Field */}\n            <Text className=\"text-white/70 text-sm mb-3\">Confirm Password</Text>\n            <View className=\"bg-white/10 border border-white/20 rounded-xl px-4 py-3 mb-8 flex-row items-center\">\n              <Lock size={20} color=\"rgba(255, 255, 255, 0.4)\" style={{ marginRight: 12 }} />\n              <TextInput\n                value={confirmPassword}\n                onChangeText={setConfirmPassword}\n                placeholder=\"Confirm your  password\"\n                placeholderTextColor=\"rgba(255, 255, 255, 0.4)\"\n                secureTextEntry={!showConfirmPassword}\n                className=\"flex-1 text-white\"\n                style={{ fontSize: 15 }}\n              />\n              <TouchableOpacity onPress={() => setShowConfirmPassword(!showConfirmPassword)}>\n                {showConfirmPassword ? (\n                  <Eye size={20} color=\"rgba(255, 255, 255, 0.4)\" />\n                ) : (\n                  <EyeOff size={20} color=\"rgba(255, 255, 255, 0.4)\" />\n                )}\n              </TouchableOpacity>\n            </View>\n\n            {/* Continue Button */}\n            <TouchableOpacity\n              onPress={handleContinue}\n              className=\"bg-[#8B5DFF] rounded-xl py-4 mb-4\"\n            >\n              <Text className=\"text-white text-lg font-semibold text-center\">\n                Continue\n              </Text>\n            </TouchableOpacity>\n\n            {/* Cancel Button */}\n            <TouchableOpacity\n              onPress={onCancel || (() => navigation?.goBack())}\n              className=\"bg-white/10 border border-white/20 rounded-xl py-4\"\n            >\n              <Text className=\"text-white text-base text-center\">\n                Cancel\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </SafeAreaView>\n      </LinearGradient>\n    </View>\n  );\n};\n","size_bytes":5369},"src/app/user/screens/DiscoverScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet, ScrollView, FlatList } from 'react-native';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { Search, ScanBarcode } from 'lucide-react-native';\nimport { Restaurant } from '../../../types/models';\nimport { RestaurantCard } from '../components/RestaurantCard';\n\nconst mockRestaurants: Restaurant[] = [\n  {\n    id: '1',\n    ownerId: '1',\n    name: 'Restaurant name',\n    description: 'Modern fusion cuisine with local ingredients',\n    cuisineTypes: ['Modern', 'Fusion'],\n    address: '123 Gourmet Street',\n    city: 'Sophie, Tanger',\n    phone: '+212 612345678',\n    email: 'contact@restaurant.com',\n    rating: 2,\n    reviewCount: 45,\n    priceRange: 3,\n    images: [],\n    coverImage: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=200',\n    amenities: [],\n    businessHours: {},\n    isVerified: true,\n    createdAt: new Date().toISOString(),\n    location: { latitude: 35.7595, longitude: -5.8340 },\n  },\n  {\n    id: '2',\n    ownerId: '1',\n    name: 'Restaurant name',\n    description: 'Traditional Moroccan cuisine',\n    cuisineTypes: ['Moroccan'],\n    address: '456 Heritage Road',\n    city: 'Sophie, Tanger',\n    phone: '+212 612345679',\n    email: 'contact@restaurant2.com',\n    rating: 3,\n    reviewCount: 32,\n    priceRange: 2,\n    images: [],\n    coverImage: 'https://images.unsplash.com/photo-1552566626-52f8b828add9?w=400&h=200',\n    amenities: [],\n    businessHours: {},\n    isVerified: true,\n    createdAt: new Date().toISOString(),\n    location: { latitude: 35.7595, longitude: -5.8340 },\n  },\n];\n\nconst categories = ['cafe', 'Food', 'Morocco Way', 'More'];\n\nexport const DiscoverScreen = () => {\n  const navigation = useNavigation<any>();\n  const route = useRoute<any>();\n  const [searchText, setSearchText] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState(route.params?.category || 'cafe');\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\n\n  const toggleFavorite = (restaurantId: string) => {\n    setFavorites(prev => {\n      const newFavorites = new Set(prev);\n      if (newFavorites.has(restaurantId)) {\n        newFavorites.delete(restaurantId);\n      } else {\n        newFavorites.add(restaurantId);\n      }\n      return newFavorites;\n    });\n  };\n\n  const handleRestaurantPress = (restaurant: Restaurant) => {\n    navigation.navigate('VenueDetails', { restaurant });\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <View style={styles.searchContainer}>\n          <Search size={20} color=\"#999\" style={styles.searchIcon} />\n          <TextInput\n            style={styles.searchInput}\n            placeholder={searchText || \"Cafe...\"}\n            placeholderTextColor=\"#666\"\n            value={searchText}\n            onChangeText={setSearchText}\n          />\n        </View>\n        <TouchableOpacity style={styles.scanButton}>\n          <ScanBarcode size={24} color=\"#fff\" />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        style={styles.categoriesScroll}\n        contentContainerStyle={styles.categoriesContent}\n      >\n        {categories.map((category) => (\n          <TouchableOpacity\n            key={category}\n            style={[\n              styles.categoryChip,\n              selectedCategory === category && styles.categoryChipSelected,\n            ]}\n            onPress={() => setSelectedCategory(category)}\n          >\n            <Text\n              style={[\n                styles.categoryChipText,\n                selectedCategory === category && styles.categoryChipTextSelected,\n              ]}\n            >\n              {category}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </ScrollView>\n\n      <FlatList\n        data={mockRestaurants}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <RestaurantCard\n            restaurant={item}\n            onPress={() => handleRestaurantPress(item)}\n            onFavoritePress={() => toggleFavorite(item.id)}\n            isFavorite={favorites.has(item.id)}\n          />\n        )}\n        contentContainerStyle={styles.listContent}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0a0a0f',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingTop: 60,\n    paddingBottom: 16,\n    gap: 12,\n  },\n  searchContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#1a1a2e',\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    height: 50,\n  },\n  searchIcon: {\n    marginRight: 8,\n  },\n  searchInput: {\n    flex: 1,\n    color: '#fff',\n    fontSize: 16,\n  },\n  scanButton: {\n    width: 50,\n    height: 50,\n    borderRadius: 12,\n    backgroundColor: '#1a1a2e',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  categoriesScroll: {\n    maxHeight: 60,\n  },\n  categoriesContent: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    gap: 8,\n  },\n  categoryChip: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 20,\n    backgroundColor: '#1a1a2e',\n    marginRight: 8,\n  },\n  categoryChipSelected: {\n    backgroundColor: '#8B5DFF',\n  },\n  categoryChipText: {\n    color: '#999',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  categoryChipTextSelected: {\n    color: '#fff',\n  },\n  listContent: {\n    paddingTop: 8,\n    paddingBottom: 20,\n  },\n});\n","size_bytes":5614},"src/app/user/screens/BookingScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, Modal } from 'react-native';\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport { ChevronLeft, ChevronRight, Minus, Plus } from 'lucide-react-native';\nimport { Restaurant } from '../../../types/models';\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst weekDays = ['Su', 'M', 'T', 'W', 'Th', 'F', 'S'];\nconst timeSlots = ['12 PM', '6 PM', '8 PM'];\n\nconst getDaysInMonth = (month: number, year: number) => {\n  return new Date(year, month + 1, 0).getDate();\n};\n\nexport const BookingScreen = () => {\n  const route = useRoute<any>();\n  const navigation = useNavigation<any>();\n  const restaurant: Restaurant = route.params?.restaurant;\n  \n  const [guests, setGuests] = useState(3);\n  const [selectedDate, setSelectedDate] = useState(15);\n  const [selectedMonth, setSelectedMonth] = useState(4);\n  const [selectedTime, setSelectedTime] = useState('6 PM');\n  const currentYear = 2025;\n\n  const handlePrevMonth = () => {\n    if (selectedMonth > 0) {\n      setSelectedMonth(selectedMonth - 1);\n    }\n  };\n\n  const handleNextMonth = () => {\n    if (selectedMonth < 11) {\n      setSelectedMonth(selectedMonth + 1);\n    }\n  };\n\n  const handleBookNow = () => {\n    navigation.goBack();\n  };\n\n  const renderCalendar = () => {\n    const daysInMonth = getDaysInMonth(selectedMonth, currentYear);\n    const firstDayOfMonth = new Date(currentYear, selectedMonth, 1).getDay();\n    const days = [];\n\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      days.push(<View key={`empty-${i}`} style={styles.dayCell} />);\n    }\n\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(\n        <TouchableOpacity\n          key={day}\n          style={[\n            styles.dayCell,\n            selectedDate === day && styles.daySelected,\n          ]}\n          onPress={() => setSelectedDate(day)}\n        >\n          <Text style={[\n            styles.dayText,\n            selectedDate === day && styles.dayTextSelected,\n          ]}>\n            {day}\n          </Text>\n        </TouchableOpacity>\n      );\n    }\n\n    return days;\n  };\n\n  return (\n    <Modal\n      visible={true}\n      animationType=\"slide\"\n      transparent={true}\n      onRequestClose={() => navigation.goBack()}\n    >\n      <View style={styles.overlay}>\n        <View style={styles.container}>\n          <Text style={styles.title}>Booking</Text>\n\n          <View style={styles.guestsSection}>\n            <Text style={styles.label}>Guests</Text>\n            <View style={styles.guestsControl}>\n              <TouchableOpacity\n                style={styles.guestButton}\n                onPress={() => setGuests(Math.max(1, guests - 1))}\n              >\n                <Minus size={20} color=\"#8B5DFF\" />\n              </TouchableOpacity>\n              <Text style={styles.guestsCount}>{guests}</Text>\n              <TouchableOpacity\n                style={styles.guestButton}\n                onPress={() => setGuests(guests + 1)}\n              >\n                <Plus size={20} color=\"#8B5DFF\" />\n              </TouchableOpacity>\n            </View>\n          </View>\n\n          <Text style={styles.label}>Date</Text>\n          <View style={styles.calendarHeader}>\n            <TouchableOpacity onPress={handlePrevMonth}>\n              <ChevronLeft size={24} color=\"#8B5DFF\" />\n            </TouchableOpacity>\n            <Text style={styles.monthText}>{months[selectedMonth]}</Text>\n            <TouchableOpacity onPress={handleNextMonth}>\n              <ChevronRight size={24} color=\"#8B5DFF\" />\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.calendar}>\n            <View style={styles.weekDaysRow}>\n              {weekDays.map((day) => (\n                <Text key={day} style={styles.weekDay}>{day}</Text>\n              ))}\n            </View>\n            <View style={styles.daysGrid}>\n              {renderCalendar()}\n            </View>\n          </View>\n\n          <Text style={styles.label}>Time</Text>\n          <View style={styles.timeSlots}>\n            <TouchableOpacity onPress={handlePrevMonth}>\n              <ChevronLeft size={24} color=\"#8B5DFF\" />\n            </TouchableOpacity>\n            {timeSlots.map((time) => (\n              <TouchableOpacity\n                key={time}\n                style={[\n                  styles.timeSlot,\n                  selectedTime === time && styles.timeSlotSelected,\n                ]}\n                onPress={() => setSelectedTime(time)}\n              >\n                <Text style={[\n                  styles.timeText,\n                  selectedTime === time && styles.timeTextSelected,\n                ]}>\n                  {time}\n                </Text>\n              </TouchableOpacity>\n            ))}\n            <TouchableOpacity onPress={handleNextMonth}>\n              <ChevronRight size={24} color=\"#8B5DFF\" />\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.actions}>\n            <TouchableOpacity\n              style={styles.cancelButton}\n              onPress={() => navigation.goBack()}\n            >\n              <Text style={styles.cancelButtonText}>Cancel</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={styles.bookButton}\n              onPress={handleBookNow}\n            >\n              <Text style={styles.bookButtonText}>Book Now</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    justifyContent: 'flex-end',\n  },\n  container: {\n    backgroundColor: '#1a1a2e',\n    borderTopLeftRadius: 24,\n    borderTopRightRadius: 24,\n    padding: 24,\n    minHeight: '80%',\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 24,\n  },\n  guestsSection: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#2a2a3e',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 24,\n  },\n  label: {\n    fontSize: 18,\n    color: '#8B5DFF',\n    marginBottom: 12,\n    fontWeight: '600',\n  },\n  guestsControl: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16,\n  },\n  guestButton: {\n    width: 36,\n    height: 36,\n    borderRadius: 18,\n    backgroundColor: '#3a3a4e',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  guestsCount: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff',\n    minWidth: 30,\n    textAlign: 'center',\n  },\n  calendarHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  monthText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#fff',\n  },\n  calendar: {\n    backgroundColor: '#2a2a3e',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 24,\n  },\n  weekDaysRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginBottom: 12,\n  },\n  weekDay: {\n    color: '#999',\n    fontSize: 14,\n    fontWeight: '500',\n    width: 40,\n    textAlign: 'center',\n  },\n  daysGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  dayCell: {\n    width: '14.28%',\n    aspectRatio: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginVertical: 4,\n  },\n  daySelected: {\n    backgroundColor: '#8B5DFF',\n    borderRadius: 20,\n  },\n  dayText: {\n    color: '#fff',\n    fontSize: 14,\n  },\n  dayTextSelected: {\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n  timeSlots: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  timeSlot: {\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 20,\n    backgroundColor: '#2a2a3e',\n  },\n  timeSlotSelected: {\n    backgroundColor: '#8B5DFF',\n  },\n  timeText: {\n    color: '#999',\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  timeTextSelected: {\n    color: '#fff',\n  },\n  actions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  cancelButton: {\n    flex: 1,\n    paddingVertical: 16,\n    borderRadius: 12,\n    backgroundColor: '#2a2a3e',\n    alignItems: 'center',\n  },\n  cancelButtonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  bookButton: {\n    flex: 1,\n    paddingVertical: 16,\n    borderRadius: 12,\n    backgroundColor: '#8B5DFF',\n    alignItems: 'center',\n  },\n  bookButtonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n});\n","size_bytes":8582}},"version":2}